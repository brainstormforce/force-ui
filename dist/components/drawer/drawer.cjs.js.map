{"version":3,"file":"drawer.cjs.js","sources":["../../../src/components/drawer/drawer.tsx"],"sourcesContent":["import React, {\n\tcloneElement,\n\tcreateContext,\n\tisValidElement,\n\tuseCallback,\n\tuseContext,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n\ttype ReactNode,\n} from 'react';\nimport { callAll } from '@/utilities/functions';\nimport { useFloating, useInteractions, useClick, useRole, useDismiss, type FloatingContext, type UseFloatingReturn } from '@floating-ui/react';\nimport DrawerPanel from './drawer-panel';\nimport DrawerHeader from './drawer-header';\nimport DrawerTitle from './drawer-title';\nimport DrawerDescription from './drawer-description';\nimport DrawerBody from './drawer-body';\nimport DrawerFooter from './drawer-footer';\nimport DrawerCloseButton from './drawer-close-button';\nimport DrawerBackdrop from './drawer-backdrop';\nimport DrawerPortal from './drawer-portal';\n\nconst TRANSITION_DURATION = 0.2;\n\nexport interface DrawerProps {\n\t/** Open state of the drawer. Optional for uncontrolled component. */\n\topen?: boolean;\n\t/** Set open state of the drawer. Optional for uncontrolled component. */\n\tsetOpen?: ( open: boolean ) => void;\n\t/** Drawer content. */\n\tchildren: ReactNode;\n\t/** Trigger element to open the drawer. Required for uncontrolled component. */\n\ttrigger?: ReactNode | ( ( props: { onClick: () => void } ) => ReactNode );\n\t/** Additional class names. */\n\tclassName?: string;\n\t/** Close drawer when clicking outside of the drawer. */\n\texitOnClickOutside?: boolean;\n\t/** Close drawer when pressing the escape key. */\n\texitOnEsc?: boolean;\n\t/** Design of the drawer. */\n\tdesign?: 'simple' | 'footer-divided' | 'footer-bordered';\n\t/** Position of the drawer. */\n\tposition?: 'left' | 'right';\n\t/** Duration of the drawer transition. */\n\ttransitionDuration?: number;\n\t/** Lock the scroll when the drawer is open. */\n\tscrollLock?: boolean;\n}\n\nexport interface DrawerContextDefault {\n\topen: DrawerProps['open'];\n\tsetOpen: ( open: boolean ) => void;\n\thandleClose: () => void;\n\tdesign: DrawerProps['design'];\n\tposition: DrawerProps['position'];\n\tdrawerContainerRef: React.RefObject<HTMLDivElement>;\n\ttransitionDuration: { duration: number };\n\tgetFloatingProps: ( props?: React.HTMLProps<HTMLElement> ) => Record<string, unknown>;\n\tscrollLock: boolean;\n\tcontext: FloatingContext;\n\tclassName?: string;\n\trefs: UseFloatingReturn['refs'];\n}\n\nconst DrawerContext = createContext<Partial<DrawerContextDefault>>( {} );\nexport const useDrawerState = () => useContext( DrawerContext );\n\n// Drawer component.\nconst Drawer = ( {\n\topen,\n\tsetOpen,\n\tchildren,\n\ttrigger,\n\tclassName,\n\texitOnClickOutside = false,\n\texitOnEsc = true,\n\tdesign = 'simple',\n\tposition = 'right',\n\ttransitionDuration = TRANSITION_DURATION,\n\tscrollLock = true,\n}: DrawerProps ) => {\n\tconst isControlled = open !== undefined && setOpen !== undefined;\n\tconst [ isOpen, setIsOpen ] = useState( false );\n\tconst drawerContainerRef = useRef<HTMLDivElement>( null );\n\n\tconst openState = useMemo(\n\t\t() => ( isControlled ? open : isOpen ),\n\t\t[ open, isOpen, isControlled ]\n\t);\n\tconst setOpenState = useMemo(\n\t\t() => ( isControlled ? setOpen : setIsOpen ),\n\t\t[ setOpen, setIsOpen, isControlled ]\n\t);\n\n\tconst handleOpen = () => {\n\t\tif ( openState ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpenState( true );\n\t};\n\n\tconst handleClose = () => {\n\t\tif ( ! openState ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpenState( false );\n\t};\n\n\t// Initialize Floating UI\n\tconst { refs, context } = useFloating( {\n\t\topen: openState,\n\t\tonOpenChange: setOpenState,\n\t\ttransform: false,\n\t} );\n\n\t// Setup interactions\n\tconst dismiss = useDismiss( context, {\n\t\tenabled: exitOnEsc || exitOnClickOutside,\n\t\tescapeKey: exitOnEsc,\n\t\toutsidePress: exitOnClickOutside,\n\t} );\n\n\tconst role = useRole( context, { role: 'dialog' } );\n\n\tconst click = useClick( context );\n\n\tconst { getFloatingProps } = useInteractions( [\n\t\tdismiss,\n\t\trole,\n\t\tclick,\n\t] );\n\n\tconst renderTrigger = useCallback( () => {\n\t\tif ( isValidElement( trigger ) ) {\n\t\t\treturn cloneElement( trigger as React.ReactElement, {\n\t\t\t\tonClick: callAll( handleOpen, trigger.props.onClick ),\n\t\t\t\tref: refs.setReference,\n\t\t\t\t'aria-haspopup': 'dialog',\n\t\t\t\t'aria-expanded': openState,\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof trigger === 'function' ) {\n\t\t\treturn trigger( { onClick: handleOpen } );\n\t\t}\n\n\t\treturn null;\n\t}, [ trigger, handleOpen, refs.setReference ] );\n\n\treturn (\n\t\t<>\n\t\t\t{ renderTrigger() }\n\t\t\t<DrawerContext.Provider\n\t\t\t\tvalue={ {\n\t\t\t\t\topen: openState,\n\t\t\t\t\tsetOpen: setOpenState,\n\t\t\t\t\thandleClose,\n\t\t\t\t\tdesign,\n\t\t\t\t\tposition,\n\t\t\t\t\tdrawerContainerRef,\n\t\t\t\t\ttransitionDuration: { duration: transitionDuration },\n\t\t\t\t\tgetFloatingProps,\n\t\t\t\t\tscrollLock,\n\t\t\t\t\tcontext,\n\t\t\t\t\tclassName,\n\t\t\t\t\trefs,\n\t\t\t\t} }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</DrawerContext.Provider>\n\t\t</>\n\t);\n};\n\nDrawer.displayName = 'Drawer';\n\nDrawer.Panel = DrawerPanel;\nDrawer.Header = DrawerHeader;\nDrawer.Title = DrawerTitle;\nDrawer.Description = DrawerDescription;\nDrawer.Body = DrawerBody;\nDrawer.CloseButton = DrawerCloseButton;\nDrawer.Footer = DrawerFooter;\nDrawer.Backdrop = DrawerBackdrop;\nDrawer.Portal = DrawerPortal;\n\nexport default Drawer;\n"],"names":["TRANSITION_DURATION","DrawerContext","createContext","useDrawerState","useContext","Drawer","open","setOpen","children","trigger","className","exitOnClickOutside","exitOnEsc","design","position","transitionDuration","scrollLock","isControlled","isOpen","setIsOpen","useState","drawerContainerRef","useRef","openState","useMemo","setOpenState","handleOpen","handleClose","refs","context","useFloating","dismiss","useDismiss","role","useRole","click","useClick","getFloatingProps","useInteractions","renderTrigger","useCallback","isValidElement","cloneElement","callAll","jsxs","Fragment","jsx","DrawerPanel","DrawerHeader","DrawerTitle","DrawerDescription","DrawerBody","DrawerCloseButton","DrawerFooter","DrawerBackdrop","DrawerPortal"],"mappings":"+jBAuBMA,EAAsB,GA0CtBC,EAAgBC,EAA8C,cAAA,EAAG,EAC1DC,EAAiB,IAAMC,EAAAA,WAAYH,CAAc,EAGxDI,EAAS,CAAE,CAChB,KAAAC,EACA,QAAAC,EACA,SAAAC,EACA,QAAAC,EACA,UAAAC,EACA,mBAAAC,EAAqB,GACrB,UAAAC,EAAY,GACZ,OAAAC,EAAS,SACT,SAAAC,EAAW,QACX,mBAAAC,EAAqBf,EACrB,WAAAgB,EAAa,EACd,IAAoB,CACb,MAAAC,EAAeX,IAAS,QAAaC,IAAY,OACjD,CAAEW,EAAQC,CAAU,EAAIC,EAAAA,SAAU,EAAM,EACxCC,EAAqBC,SAAwB,IAAK,EAElDC,EAAYC,EAAA,QACjB,IAAQP,EAAeX,EAAOY,EAC9B,CAAEZ,EAAMY,EAAQD,CAAa,CAC9B,EACMQ,EAAeD,EAAA,QACpB,IAAQP,EAAeV,EAAUY,EACjC,CAAEZ,EAASY,EAAWF,CAAa,CACpC,EAEMS,EAAa,IAAM,CACnBH,GAILE,EAAc,EAAK,CACpB,EAEME,EAAc,IAAM,CAClBJ,GAIPE,EAAc,EAAM,CACrB,EAGM,CAAE,KAAAG,EAAM,QAAAC,CAAQ,EAAIC,cAAa,CACtC,KAAMP,EACN,aAAcE,EACd,UAAW,EAAA,CACV,EAGIM,EAAUC,aAAYH,EAAS,CACpC,QAASjB,GAAaD,EACtB,UAAWC,EACX,aAAcD,CAAA,CACb,EAEIsB,EAAOC,EAAAA,QAASL,EAAS,CAAE,KAAM,SAAW,EAE5CM,EAAQC,WAAUP,CAAQ,EAE1B,CAAE,iBAAAQ,CAAiB,EAAIC,kBAAiB,CAC7CP,EACAE,EACAE,CAAA,CACC,EAEII,EAAgBC,EAAAA,YAAa,IAC7BC,EAAAA,eAAgBhC,CAAQ,EACrBiC,EAAAA,aAAcjC,EAA+B,CACnD,QAASkC,EAAAA,QAASjB,EAAYjB,EAAQ,MAAM,OAAQ,EACpD,IAAKmB,EAAK,aACV,gBAAiB,SACjB,gBAAiBL,CAAA,CAChB,EAGE,OAAOd,GAAY,WAChBA,EAAS,CAAE,QAASiB,EAAa,EAGlC,KACL,CAAEjB,EAASiB,EAAYE,EAAK,YAAa,CAAE,EAE9C,OAEIgB,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAcN,EAAA,EAChBO,EAAA,IAAC7C,EAAc,SAAd,CACA,MAAQ,CACP,KAAMsB,EACN,QAASE,EACT,YAAAE,EACA,OAAAd,EACA,SAAAC,EACA,mBAAAO,EACA,mBAAoB,CAAE,SAAUN,CAAmB,EACnD,iBAAAsB,EACA,WAAArB,EACA,QAAAa,EACA,UAAAnB,EACA,KAAAkB,CACD,EAEE,SAAApB,CAAA,CAAA,CACH,EACD,CAEF,EAEAH,EAAO,YAAc,SAErBA,EAAO,MAAQ0C,EAAA,QACf1C,EAAO,OAAS2C,EAAA,QAChB3C,EAAO,MAAQ4C,EAAA,QACf5C,EAAO,YAAc6C,EAAA,QACrB7C,EAAO,KAAO8C,EAAA,QACd9C,EAAO,YAAc+C,EAAA,QACrB/C,EAAO,OAASgD,EAAA,QAChBhD,EAAO,SAAWiD,EAAA,QAClBjD,EAAO,OAASkD,EAAA"}