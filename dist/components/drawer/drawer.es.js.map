{"version":3,"file":"drawer.es.js","sources":["../../../src/components/drawer/drawer.tsx"],"sourcesContent":["import React, {\n\tcloneElement,\n\tcreateContext,\n\tisValidElement,\n\tuseCallback,\n\tuseContext,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n\ttype ReactNode,\n} from 'react';\nimport { callAll } from '@/utilities/functions';\nimport { useFloating, useInteractions, useClick, useRole, useDismiss, type FloatingContext, type UseFloatingReturn } from '@floating-ui/react';\nimport DrawerPanel from './drawer-panel';\nimport DrawerHeader from './drawer-header';\nimport DrawerTitle from './drawer-title';\nimport DrawerDescription from './drawer-description';\nimport DrawerBody from './drawer-body';\nimport DrawerFooter from './drawer-footer';\nimport DrawerCloseButton from './drawer-close-button';\nimport DrawerBackdrop from './drawer-backdrop';\nimport DrawerPortal from './drawer-portal';\n\nconst TRANSITION_DURATION = 0.2;\n\nexport interface DrawerProps {\n\t/** Open state of the drawer. Optional for uncontrolled component. */\n\topen?: boolean;\n\t/** Set open state of the drawer. Optional for uncontrolled component. */\n\tsetOpen?: ( open: boolean ) => void;\n\t/** Drawer content. */\n\tchildren: ReactNode;\n\t/** Trigger element to open the drawer. Required for uncontrolled component. */\n\ttrigger?: ReactNode | ( ( props: { onClick: () => void } ) => ReactNode );\n\t/** Additional class names. */\n\tclassName?: string;\n\t/** Close drawer when clicking outside of the drawer. */\n\texitOnClickOutside?: boolean;\n\t/** Close drawer when pressing the escape key. */\n\texitOnEsc?: boolean;\n\t/** Design of the drawer. */\n\tdesign?: 'simple' | 'footer-divided' | 'footer-bordered';\n\t/** Position of the drawer. */\n\tposition?: 'left' | 'right';\n\t/** Duration of the drawer transition. */\n\ttransitionDuration?: number;\n\t/** Lock the scroll when the drawer is open. */\n\tscrollLock?: boolean;\n}\n\nexport interface DrawerContextDefault {\n\topen: DrawerProps['open'];\n\tsetOpen: ( open: boolean ) => void;\n\thandleClose: () => void;\n\tdesign: DrawerProps['design'];\n\tposition: DrawerProps['position'];\n\tdrawerContainerRef: React.RefObject<HTMLDivElement>;\n\ttransitionDuration: { duration: number };\n\tgetFloatingProps: ( props?: React.HTMLProps<HTMLElement> ) => Record<string, unknown>;\n\tscrollLock: boolean;\n\tcontext: FloatingContext;\n\tclassName?: string;\n\trefs: UseFloatingReturn['refs'];\n}\n\nconst DrawerContext = createContext<Partial<DrawerContextDefault>>( {} );\nexport const useDrawerState = () => useContext( DrawerContext );\n\n// Drawer component.\nconst Drawer = ( {\n\topen,\n\tsetOpen,\n\tchildren,\n\ttrigger,\n\tclassName,\n\texitOnClickOutside = false,\n\texitOnEsc = true,\n\tdesign = 'simple',\n\tposition = 'right',\n\ttransitionDuration = TRANSITION_DURATION,\n\tscrollLock = true,\n}: DrawerProps ) => {\n\tconst isControlled = open !== undefined && setOpen !== undefined;\n\tconst [ isOpen, setIsOpen ] = useState( false );\n\tconst drawerContainerRef = useRef<HTMLDivElement>( null );\n\n\tconst openState = useMemo(\n\t\t() => ( isControlled ? open : isOpen ),\n\t\t[ open, isOpen, isControlled ]\n\t);\n\tconst setOpenState = useMemo(\n\t\t() => ( isControlled ? setOpen : setIsOpen ),\n\t\t[ setOpen, setIsOpen, isControlled ]\n\t);\n\n\tconst handleOpen = () => {\n\t\tif ( openState ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpenState( true );\n\t};\n\n\tconst handleClose = () => {\n\t\tif ( ! openState ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpenState( false );\n\t};\n\n\t// Initialize Floating UI\n\tconst { refs, context } = useFloating( {\n\t\topen: openState,\n\t\tonOpenChange: setOpenState,\n\t\ttransform: false,\n\t} );\n\n\t// Setup interactions\n\tconst dismiss = useDismiss( context, {\n\t\tenabled: exitOnEsc || exitOnClickOutside,\n\t\tescapeKey: exitOnEsc,\n\t\toutsidePress: exitOnClickOutside,\n\t} );\n\n\tconst role = useRole( context, { role: 'dialog' } );\n\n\tconst click = useClick( context );\n\n\tconst { getFloatingProps } = useInteractions( [\n\t\tdismiss,\n\t\trole,\n\t\tclick,\n\t] );\n\n\tconst renderTrigger = useCallback( () => {\n\t\tif ( isValidElement( trigger ) ) {\n\t\t\treturn cloneElement( trigger as React.ReactElement, {\n\t\t\t\tonClick: callAll( handleOpen, trigger.props.onClick ),\n\t\t\t\tref: refs.setReference,\n\t\t\t\t'aria-haspopup': 'dialog',\n\t\t\t\t'aria-expanded': openState,\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof trigger === 'function' ) {\n\t\t\treturn trigger( { onClick: handleOpen } );\n\t\t}\n\n\t\treturn null;\n\t}, [ trigger, handleOpen, refs.setReference ] );\n\n\treturn (\n\t\t<>\n\t\t\t{ renderTrigger() }\n\t\t\t<DrawerContext.Provider\n\t\t\t\tvalue={ {\n\t\t\t\t\topen: openState,\n\t\t\t\t\tsetOpen: setOpenState,\n\t\t\t\t\thandleClose,\n\t\t\t\t\tdesign,\n\t\t\t\t\tposition,\n\t\t\t\t\tdrawerContainerRef,\n\t\t\t\t\ttransitionDuration: { duration: transitionDuration },\n\t\t\t\t\tgetFloatingProps,\n\t\t\t\t\tscrollLock,\n\t\t\t\t\tcontext,\n\t\t\t\t\tclassName,\n\t\t\t\t\trefs,\n\t\t\t\t} }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</DrawerContext.Provider>\n\t\t</>\n\t);\n};\n\nDrawer.displayName = 'Drawer';\n\nDrawer.Panel = DrawerPanel;\nDrawer.Header = DrawerHeader;\nDrawer.Title = DrawerTitle;\nDrawer.Description = DrawerDescription;\nDrawer.Body = DrawerBody;\nDrawer.CloseButton = DrawerCloseButton;\nDrawer.Footer = DrawerFooter;\nDrawer.Backdrop = DrawerBackdrop;\nDrawer.Portal = DrawerPortal;\n\nexport default Drawer;\n"],"names":["TRANSITION_DURATION","DrawerContext","createContext","useDrawerState","useContext","Drawer","open","setOpen","children","trigger","className","exitOnClickOutside","exitOnEsc","design","position","transitionDuration","scrollLock","isControlled","isOpen","setIsOpen","useState","drawerContainerRef","useRef","openState","useMemo","setOpenState","handleOpen","handleClose","refs","context","useFloating","dismiss","useDismiss","role","useRole","click","useClick","getFloatingProps","useInteractions","renderTrigger","useCallback","isValidElement","cloneElement","callAll","jsxs","Fragment","jsx","DrawerPanel","DrawerHeader","DrawerTitle","DrawerDescription","DrawerBody","DrawerCloseButton","DrawerFooter","DrawerBackdrop","DrawerPortal"],"mappings":";;;;;;;;;;;;;AAuBA,MAAMA,KAAsB,KA0CtBC,IAAgBC,EAA8C,EAAG,GAC1DC,KAAiB,MAAMC,EAAYH,CAAc,GAGxDI,IAAS,CAAE;AAAA,EAChB,MAAAC;AAAA,EACA,SAAAC;AAAA,EACA,UAAAC;AAAA,EACA,SAAAC;AAAA,EACA,WAAAC;AAAA,EACA,oBAAAC,IAAqB;AAAA,EACrB,WAAAC,IAAY;AAAA,EACZ,QAAAC,IAAS;AAAA,EACT,UAAAC,IAAW;AAAA,EACX,oBAAAC,IAAqBf;AAAA,EACrB,YAAAgB,IAAa;AACd,MAAoB;AACb,QAAAC,IAAeX,MAAS,UAAaC,MAAY,QACjD,CAAEW,GAAQC,CAAU,IAAIC,EAAU,EAAM,GACxCC,IAAqBC,EAAwB,IAAK,GAElDC,IAAYC;AAAA,IACjB,MAAQP,IAAeX,IAAOY;AAAA,IAC9B,CAAEZ,GAAMY,GAAQD,CAAa;AAAA,EAC9B,GACMQ,IAAeD;AAAA,IACpB,MAAQP,IAAeV,IAAUY;AAAA,IACjC,CAAEZ,GAASY,GAAWF,CAAa;AAAA,EACpC,GAEMS,IAAa,MAAM;AACxB,IAAKH,KAILE,EAAc,EAAK;AAAA,EACpB,GAEME,IAAc,MAAM;AACzB,IAAOJ,KAIPE,EAAc,EAAM;AAAA,EACrB,GAGM,EAAE,MAAAG,GAAM,SAAAC,EAAQ,IAAIC,EAAa;AAAA,IACtC,MAAMP;AAAA,IACN,cAAcE;AAAA,IACd,WAAW;AAAA,EAAA,CACV,GAGIM,IAAUC,EAAYH,GAAS;AAAA,IACpC,SAASjB,KAAaD;AAAA,IACtB,WAAWC;AAAA,IACX,cAAcD;AAAA,EAAA,CACb,GAEIsB,IAAOC,EAASL,GAAS,EAAE,MAAM,UAAW,GAE5CM,IAAQC,EAAUP,CAAQ,GAE1B,EAAE,kBAAAQ,EAAiB,IAAIC,EAAiB;AAAA,IAC7CP;AAAA,IACAE;AAAA,IACAE;AAAA,EAAA,CACC,GAEII,IAAgBC,EAAa,MAC7BC,EAAgBhC,CAAQ,IACrBiC,EAAcjC,GAA+B;AAAA,IACnD,SAASkC,EAASjB,GAAYjB,EAAQ,MAAM,OAAQ;AAAA,IACpD,KAAKmB,EAAK;AAAA,IACV,iBAAiB;AAAA,IACjB,iBAAiBL;AAAA,EAAA,CAChB,IAGE,OAAOd,KAAY,aAChBA,EAAS,EAAE,SAASiB,GAAa,IAGlC,MACL,CAAEjB,GAASiB,GAAYE,EAAK,YAAa,CAAE;AAE9C,SAEI,gBAAAgB,EAAAC,GAAA,EAAA,UAAA;AAAA,IAAcN,EAAA;AAAA,IAChB,gBAAAO;AAAA,MAAC7C,EAAc;AAAA,MAAd;AAAA,QACA,OAAQ;AAAA,UACP,MAAMsB;AAAA,UACN,SAASE;AAAA,UACT,aAAAE;AAAA,UACA,QAAAd;AAAA,UACA,UAAAC;AAAA,UACA,oBAAAO;AAAA,UACA,oBAAoB,EAAE,UAAUN,EAAmB;AAAA,UACnD,kBAAAsB;AAAA,UACA,YAAArB;AAAA,UACA,SAAAa;AAAA,UACA,WAAAnB;AAAA,UACA,MAAAkB;AAAA,QACD;AAAA,QAEE,UAAApB;AAAA,MAAA;AAAA,IAAA;AAAA,EACH,GACD;AAEF;AAEAH,EAAO,cAAc;AAErBA,EAAO,QAAQ0C;AACf1C,EAAO,SAAS2C;AAChB3C,EAAO,QAAQ4C;AACf5C,EAAO,cAAc6C;AACrB7C,EAAO,OAAO8C;AACd9C,EAAO,cAAc+C;AACrB/C,EAAO,SAASgD;AAChBhD,EAAO,WAAWiD;AAClBjD,EAAO,SAASkD;"}