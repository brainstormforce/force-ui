{"version":3,"file":"dialog.cjs.js","sources":["../../../src/components/dialog/dialog.tsx"],"sourcesContent":["import {\n\tcloneElement,\n\tcreateContext,\n\ttype ElementType,\n\tFragment,\n\tisValidElement,\n\tuseCallback,\n\tuseContext,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n\ttype ReactNode,\n} from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport { callAll, cn } from '@/utilities/functions';\nimport { X } from 'lucide-react';\nimport { createPortal } from 'react-dom';\nimport {\n\tuseFloating,\n\tuseClick,\n\tuseDismiss,\n\tuseRole,\n\tuseInteractions,\n\tFloatingFocusManager,\n\tFloatingOverlay,\n\tFloatingPortal,\n\ttype UseFloatingReturn,\n} from '@floating-ui/react';\n\nexport interface DialogState {\n\topen: boolean;\n\tsetOpen: ( open: boolean ) => void;\n\thandleClose: () => void;\n\tdesign: 'simple' | 'footer-divided';\n\tcontext: UseFloatingReturn['context'];\n\tgetFloatingProps: () => Record<string, unknown>;\n\t// Keep these refs for backward compatibility\n\tdialogContainerRef: React.RefObject<HTMLDivElement | null>;\n\tdialogRef: React.MutableRefObject<HTMLDivElement | null>;\n\tscrollLock: boolean;\n\tclassName: string,\n\trefs: UseFloatingReturn['refs']\n}\n\nconst DialogContext = createContext<Partial<DialogState>>( {} );\nconst useDialogState = () => useContext( DialogContext );\n\nconst animationVariants = {\n\topen: {\n\t\topacity: 1,\n\t},\n\texit: {\n\t\topacity: 0,\n\t},\n};\nconst TRANSITION_DURATION = { duration: 0.2 };\n\nexport interface CommonProps {\n\t/** Additional class name. */\n\tclassName?: string;\n\t/** Additional inline styles. */\n\tstyle?: React.CSSProperties;\n}\n\nexport interface DialogProps extends CommonProps {\n\t/** Control the dialog open state. If not provided, the dialog will be controlled internally. */\n\topen?: boolean;\n\t/** Control the dialog open state. If not provided, the dialog will be controlled internally. */\n\tsetOpen?: ( open: boolean ) => void;\n\t/** Children of the dialog. */\n\tchildren: ReactNode;\n\t/** Trigger element for the dialog. */\n\ttrigger?:\n\t\t| ReactNode\n\t\t| ( ( props: { onClick: () => void } ) => React.ReactElement );\n\t/** Close the dialog on clicking outside the dialog. */\n\texitOnClickOutside?: boolean;\n\t/** Close the dialog on pressing the escape key. */\n\texitOnEsc?: boolean;\n\t/** Design of the dialog. */\n\tdesign?: 'simple' | 'footer-divided';\n\t/** Lock the scroll when the dialog is open. */\n\tscrollLock?: boolean;\n}\n\n// Dialog component.\nconst Dialog = ( {\n\topen,\n\tsetOpen,\n\tchildren,\n\ttrigger = null,\n\tclassName,\n\texitOnClickOutside = false,\n\texitOnEsc = true,\n\tdesign = 'simple',\n\tscrollLock = true,\n}: DialogProps ): JSX.Element => {\n\tconst isControlled = open !== undefined && setOpen !== undefined;\n\tconst [ isOpen, setIsOpen ] = useState( false );\n\tconst dialogRef = useRef<HTMLDivElement | null>( null );\n\tconst dialogContainerRef = useRef( null );\n\n\tconst openState = useMemo(\n\t\t() => ( isControlled ? open : isOpen ),\n\t\t[ open, isOpen ]\n\t);\n\tconst setOpenState = useMemo(\n\t\t() => ( isControlled ? setOpen : setIsOpen ),\n\t\t[ setIsOpen, setOpen ]\n\t);\n\n\t// Floating UI setup\n\tconst { refs, context } = useFloating( {\n\t\topen: openState,\n\t\tonOpenChange: setOpenState,\n\t} );\n\n\tconst click = useClick( context );\n\tconst dismiss = useDismiss( context, {\n\t\toutsidePressEvent: 'mousedown',\n\t\tenabled: exitOnClickOutside || exitOnEsc,\n\t\tescapeKey: exitOnEsc,\n\t\toutsidePress: exitOnClickOutside,\n\t} );\n\tconst role = useRole( context, { role: 'dialog' } );\n\n\tconst { getFloatingProps } = useInteractions( [ click, dismiss, role ] );\n\n\tconst handleOpen = () => {\n\t\tif ( openState ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpenState( true );\n\t};\n\n\tconst handleClose = () => {\n\t\tif ( ! openState ) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpenState( false );\n\t};\n\n\tconst renderTrigger = useCallback( () => {\n\t\tif ( isValidElement( trigger ) ) {\n\t\t\treturn cloneElement( trigger as React.ReactElement, {\n\t\t\t\tonClick: callAll( handleOpen, trigger?.props?.onClick ),\n\t\t\t\tref: refs.setReference,\n\t\t\t\t'aria-haspopup': 'dialog', // Added for accessibility\n\t\t\t\t'aria-expanded': openState, // Added for accessibility\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof trigger === 'function' ) {\n\t\t\treturn trigger( { onClick: handleOpen } );\n\t\t}\n\n\t\treturn null;\n\t}, [ trigger, handleOpen, refs.setReference, openState ] );\n\n\treturn (\n\t\t<>\n\t\t\t{ renderTrigger() }\n\t\t\t<DialogContext.Provider\n\t\t\t\tvalue={ {\n\t\t\t\t\topen: openState,\n\t\t\t\t\tsetOpen: setOpenState,\n\t\t\t\t\thandleClose,\n\t\t\t\t\tdesign,\n\t\t\t\t\tcontext,\n\t\t\t\t\tgetFloatingProps,\n\t\t\t\t\trefs,\n\t\t\t\t\tdialogContainerRef,\n\t\t\t\t\tdialogRef,\n\t\t\t\t\tscrollLock,\n\t\t\t\t\tclassName,\n\t\t\t\t} }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</DialogContext.Provider>\n\t\t</>\n\t);\n};\nDialog.displayName = 'Dialog';\n\nexport interface DialogPanelProps extends CommonProps {\n\t/** Children of the dialog panel. */\n\tchildren: ReactNode | ( ( param: { close: () => void } ) => ReactNode );\n}\n\nexport const DialogPanel = ( {\n\tchildren,\n\tclassName,\n}: DialogPanelProps ): JSX.Element => {\n\tconst {\n\t\topen,\n\t\thandleClose,\n\t\tcontext,\n\t\tgetFloatingProps,\n\t\tdialogRef,\n\t\tscrollLock,\n\t\tdialogContainerRef,\n\t\tclassName: rootClassName,\n\t\trefs,\n\t} = useDialogState();\n\n\tconst dialogContent = (\n\t\t<AnimatePresence>\n\t\t\t{ open && (\n\t\t\t\t<FloatingOverlay\n\t\t\t\t\tref={ dialogContainerRef as React.RefObject<HTMLDivElement> }\n\t\t\t\t\tlockScroll={ scrollLock }\n\t\t\t\t\tclassName={ cn( 'z-999999', rootClassName ) }\n\t\t\t\t\taria-modal=\"true\"\n\t\t\t\t>\n\t\t\t\t\t<FloatingFocusManager\n\t\t\t\t\t\tcontext={ context as UseFloatingReturn['context'] }\n\t\t\t\t\t\t{ ...( refs?.reference && { returnFocus: refs.reference as React.MutableRefObject<HTMLElement> } ) }\n\t\t\t\t\t>\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tclassName=\"fixed inset-0 overflow-y-auto\"\n\t\t\t\t\t\t\tinitial=\"exit\"\n\t\t\t\t\t\t\tanimate=\"open\"\n\t\t\t\t\t\t\texit=\"exit\"\n\t\t\t\t\t\t\tvariants={ animationVariants }\n\t\t\t\t\t\t\trole=\"dialog\"\n\t\t\t\t\t\t\taria-modal=\"true\"\n\t\t\t\t\t\t\ttransition={ TRANSITION_DURATION }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center min-h-full\">\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tref={ ( node ) => {\n\t\t\t\t\t\t\t\t\t\tif ( node ) {\n\t\t\t\t\t\t\t\t\t\t\t// Set both refs\n\t\t\t\t\t\t\t\t\t\t\tdialogRef!.current = node;\n\t\t\t\t\t\t\t\t\t\t\tif ( context ) {\n\t\t\t\t\t\t\t\t\t\t\t\tcontext.refs.setFloating( node );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\t{ ...getFloatingProps?.() }\n\t\t\t\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\t\t\t\t'flex flex-col gap-5 w-120 h-fit bg-background-primary border border-solid border-border-subtle rounded-xl shadow-soft-shadow-2xl my-5 overflow-hidden',\n\t\t\t\t\t\t\t\t\t\tclassName\n\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ typeof children === 'function'\n\t\t\t\t\t\t\t\t\t\t? children( { close: handleClose! } )\n\t\t\t\t\t\t\t\t\t\t: children }\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t</FloatingFocusManager>\n\t\t\t\t</FloatingOverlay>\n\t\t\t) }\n\t\t</AnimatePresence>\n\t);\n\n\t// If in portal context, don't wrap in portal again\n\treturn dialogContent;\n};\nDialogPanel.displayName = 'Dialog.Panel';\n\n// New Portal component\nexport interface DialogPortalProps {\n\t/** Children of the dialog portal. */\n\tchildren: ReactNode;\n\t/** Id of the dialog portal where the element will be rendered. If not provided, the dialog will be rendered in the body. */\n\tid?: string;\n\t/** Root element of the dialog portal. If not provided, the dialog will be rendered in the body. */\n\troot?: HTMLElement;\n}\n\nexport const DialogPortal = ( {\n\tchildren,\n\t...props\n}: DialogPortalProps ): JSX.Element => {\n\treturn <FloatingPortal { ...props }>{ children }</FloatingPortal>;\n};\nDialogPortal.displayName = 'Dialog.Portal';\n\nexport const DialogBackdrop = ( {\n\tclassName,\n\t...props\n}: CommonProps ): JSX.Element | null => {\n\tconst { open, dialogContainerRef } = useDialogState();\n\n\tif ( ! dialogContainerRef?.current ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{ createPortal(\n\t\t\t\t<AnimatePresence>\n\t\t\t\t\t{ open && (\n\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\t\t'fixed inset-0 -z-10 bg-background-inverse/90',\n\t\t\t\t\t\t\t\tclassName\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t{ ...props }\n\t\t\t\t\t\t\tinitial=\"exit\"\n\t\t\t\t\t\t\tanimate=\"open\"\n\t\t\t\t\t\t\texit=\"exit\"\n\t\t\t\t\t\t\tvariants={ animationVariants }\n\t\t\t\t\t\t\ttransition={ TRANSITION_DURATION }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</AnimatePresence>,\n\t\t\t\tdialogContainerRef.current\n\t\t\t) }\n\t\t</>\n\t);\n};\nDialogBackdrop.displayName = 'Dialog.Backdrop';\n\nexport interface DialogHeaderProps extends CommonProps {\n\t/** Children of the dialog header. */\n\tchildren: ReactNode;\n}\n\n// Dialog header wrapper.\nexport const DialogHeader = ( {\n\tchildren,\n\tclassName,\n\t...props\n}: DialogHeaderProps ): JSX.Element => {\n\treturn (\n\t\t<div className={ cn( 'space-y-2 px-5 pt-5 pb-1', className ) } { ...props }>\n\t\t\t{ children }\n\t\t</div>\n\t);\n};\nDialogHeader.displayName = 'Dialog.Header';\n\nexport interface DialogTitleProp extends CommonProps {\n\t/** Children of the dialog title. */\n\tchildren: ReactNode;\n\t/** Additional class name for the dialog title. */\n\tas?: ElementType;\n}\n\n// Dialog title.\nexport const DialogTitle = ( {\n\tchildren,\n\tas: Tag = 'h3',\n\tclassName,\n\t...props\n}: DialogTitleProp ): JSX.Element => {\n\treturn (\n\t\t<Tag\n\t\t\tclassName={ cn(\n\t\t\t\t'text-base font-semibold text-text-primary m-0 p-0',\n\t\t\t\tclassName\n\t\t\t) }\n\t\t\t{ ...props }\n\t\t>\n\t\t\t{ children }\n\t\t</Tag>\n\t);\n};\nDialogTitle.displayName = 'Dialog.Title';\n\nexport interface DialogDescriptionProp extends CommonProps {\n\t/** Children of the dialog description. */\n\tchildren: ReactNode;\n\t/** Additional class name for the dialog description. */\n\tas?: ElementType;\n}\n\n// Dialog description.\nexport const DialogDescription = ( {\n\tchildren,\n\tas: Tag = 'p',\n\tclassName,\n\t...props\n}: DialogDescriptionProp ): JSX.Element => {\n\treturn (\n\t\t<Tag\n\t\t\tclassName={ cn(\n\t\t\t\t'text-sm font-normal text-text-secondary my-0 ml-0 mr-1 p-0',\n\t\t\t\tclassName\n\t\t\t) }\n\t\t\t{ ...props }\n\t\t>\n\t\t\t{ children }\n\t\t</Tag>\n\t);\n};\nDialogDescription.displayName = 'Dialog.Description';\n\nexport interface DialogCloseButtonProps extends CommonProps {\n\t/** Children of the dialog close button. */\n\tchildren?: ReactNode;\n\t/** Additional class name for the dialog close button. */\n\tas?: ElementType;\n\t/** Additional class name for the dialog close button. */\n\tclassName?: string;\n\t/** Additional props based on the as value. */\n\t[key: string]: unknown;\n}\n\nexport interface DialogDefaultCloseButtonProps extends CommonProps {\n\t/** On click event for the close button. */\n\tonClick?: () => void;\n}\n\n// Default close button for the dialog.\nexport const DefaultCloseButton = ( {\n\tclassName,\n\t...props\n}: DialogDefaultCloseButtonProps ): JSX.Element => {\n\treturn (\n\t\t<button\n\t\t\tclassName={ cn(\n\t\t\t\t'bg-transparent inline-flex justify-center items-center border-0 p-1 m-0 cursor-pointer focus:outline-none outline-none shadow-none',\n\t\t\t\tclassName\n\t\t\t) }\n\t\t\taria-label=\"Close dialog\"\n\t\t\t{ ...props }\n\t\t>\n\t\t\t<X className=\"size-4 text-text-primary shrink-0\" />\n\t\t</button>\n\t);\n};\n\n// Close button for the dialog.\nexport const DialogCloseButton = ( {\n\tchildren,\n\tas: Tag = Fragment,\n\t...props\n}: DialogCloseButtonProps ): JSX.Element | ReactNode => {\n\tconst { handleClose } = useDialogState();\n\n\tif ( ! children ) {\n\t\treturn <DefaultCloseButton onClick={ handleClose } { ...props } />;\n\t}\n\n\tif ( Tag === Fragment ) {\n\t\tif ( typeof children === 'function' ) {\n\t\t\treturn ( children as ( args: { close: () => void } ) => ReactNode )( {\n\t\t\t\tclose: handleClose!,\n\t\t\t} );\n\t\t}\n\n\t\treturn cloneElement( children as React.ReactElement, {\n\t\t\tonClick: handleClose,\n\t\t} );\n\t}\n\n\treturn (\n\t\t<Tag { ...props } onClick={ handleClose } aria-label=\"Close dialog\">\n\t\t\t{ children }\n\t\t</Tag>\n\t);\n};\nDialogCloseButton.displayName = 'Dialog.CloseButton';\n\nexport interface DialogBodyProps extends CommonProps {\n\t/** Children of the dialog body. */\n\tchildren: ReactNode;\n}\n\n// Dialog body.\nexport const DialogBody = ( {\n\tchildren,\n\tclassName,\n\t...props\n}: DialogBodyProps ): JSX.Element => {\n\treturn (\n\t\t<div className={ cn( 'px-5', className ) } { ...props }>\n\t\t\t{ children }\n\t\t</div>\n\t);\n};\nDialogBody.displayName = 'Dialog.Body';\n\n// Dialog footer.\nexport interface DialogFooterProps extends CommonProps {\n\t/** Children of the dialog footer. */\n\tchildren?: ReactNode | ( ( props: { close: () => void } ) => ReactNode );\n}\n\nexport const DialogFooter = ( {\n\tchildren,\n\tclassName,\n}: DialogFooterProps ): JSX.Element => {\n\tconst { design, handleClose } = useDialogState();\n\n\tconst renderChildren = () => {\n\t\tif ( ! children ) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif ( typeof children === 'function' ) {\n\t\t\treturn children( { close: handleClose! } );\n\t\t}\n\n\t\treturn children;\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={ cn(\n\t\t\t\t'p-4 flex justify-end gap-3',\n\t\t\t\t{\n\t\t\t\t\t'bg-background-secondary': design === 'footer-divided',\n\t\t\t\t},\n\t\t\t\tclassName\n\t\t\t) }\n\t\t>\n\t\t\t{ renderChildren() }\n\t\t</div>\n\t);\n};\nDialogFooter.displayName = 'Dialog.Footer';\n\nDialog.Panel = DialogPanel;\nDialog.Portal = DialogPortal;\nDialog.Title = DialogTitle;\nDialog.Description = DialogDescription;\nDialog.CloseButton = DialogCloseButton;\nDialog.Header = DialogHeader;\nDialog.Body = DialogBody;\nDialog.Footer = DialogFooter;\nDialog.Backdrop = DialogBackdrop;\n\nexport default Dialog;\n"],"names":["DialogContext","createContext","useDialogState","useContext","animationVariants","TRANSITION_DURATION","Dialog","open","setOpen","children","trigger","className","exitOnClickOutside","exitOnEsc","design","scrollLock","isControlled","isOpen","setIsOpen","useState","dialogRef","useRef","dialogContainerRef","openState","useMemo","setOpenState","refs","context","useFloating","click","useClick","dismiss","useDismiss","role","useRole","getFloatingProps","useInteractions","handleOpen","handleClose","renderTrigger","useCallback","isValidElement","cloneElement","callAll","jsxs","Fragment","jsx","DialogPanel","rootClassName","AnimatePresence","FloatingOverlay","cn","FloatingFocusManager","motion","node","DialogPortal","props","FloatingPortal","DialogBackdrop","createPortal","DialogHeader","DialogTitle","Tag","DialogDescription","DefaultCloseButton","X","DialogCloseButton","DialogBody","DialogFooter","renderChildren"],"mappings":"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"}