{"version":3,"file":"bar-chart.es.js","sources":["../../../src/components/bar-chart/bar-chart.tsx"],"sourcesContent":["import {\n\tBarChart as BarChartWrapper,\n\tBar,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tResponsiveContainer,\n\ttype BarProps,\n} from 'recharts';\nimport ChartLegendContent from './chart-legend-content';\nimport ChartTooltipContent from './chart-tooltip-content';\nimport Label from '../label';\n\ninterface DataItem {\n\t[key: string]: number | string;\n}\ninterface Color {\n\tfill: string;\n}\n\ninterface BarChartProps {\n\t/** An array of objects representing the source data for the chart. */\n\tdata: DataItem[];\n\n\t/** An array of strings representing the keys to access data in each data object. Used for identifying different data series. */\n\tdataKeys: string[];\n\n\t/** An array of color strings that determine the colors for each data series in the chart. */\n\tcolors?: Color[];\n\n\t/** Defines the layout of Bar Chart. if you want to check how layout `vertical` works, then you need to clear the xAxisDataKey value and set showCartesianGrid to false. */\n\tlayout?: 'horizontal' | 'vertical';\n\n\t/** Defines are the chart bars are stacked. */\n\tstacked?: boolean;\n\n\t/** Whether to render the `<XAxis />` component for the x-axis. */\n\tshowXAxis?: boolean;\n\n\t/** Whether to render the `<YAxis />` component for the y-axis. */\n\tshowYAxis?: boolean;\n\n\t/** Toggle the visibility of the tooltip on hover, displaying detailed information for each data point. */\n\tshowTooltip?: boolean;\n\n\t/** The tooltip indicator. It can be `dot`, `line` or `dashed`. */\n\ttooltipIndicator?: 'dot' | 'line' | 'dashed';\n\n\t/** Present tooltip lable key. E.g. for this data element: `{ month: 'January', desktop: 186, mobile: 80 }` if set lableKye to 'month' the tooltip will display the month name (like 'January'). */\n\ttooltipLabelKey?: string;\n\n\t/** Whether to render the `<Legend />` component to identify data series. */\n\tshowLegend?: boolean;\n\n\t/** Whether to display the `<CartesianGrid />`, adding horizontal and vertical grid lines. */\n\tshowCartesianGrid?: boolean;\n\n\t/** A function used to format the ticks on the axes, e.g., ```const monthFormatter = ( value: string ) => value.slice( 0, 3 );``` */\n\txTickFormatter?: ( value: string ) => string;\n\n\t/** A function used to format the ticks on the y-axis. */\n\tyTickFormatter?: ( value: string ) => string;\n\n\t/** The key in the data objects representing values for the x-axis. This is used to access the x-axis values from each data entry. */\n\txAxisDataKey?: string;\n\n\t/** The key in the data objects representing values for the y-axis. This is used to access the y-axis values from each data entry. */\n\tyAxisDataKey?: string;\n\n\t/** Font size for the labels on the x-axis. */\n\txAxisFontSize?: 'sm' | 'md' | 'lg';\n\n\t/** Font color for the labels on the x-axis. */\n\txAxisFontColor?: string;\n\n\t/** Font color for the labels on the y-axis. */\n\tyAxisFontColor?: string;\n\n\t/** Width of the chart container. */\n\tchartWidth?: number;\n\n\t/** Height of the chart container. */\n\tchartHeight?: number;\n\n\t/** Border radius of chart bar. */\n\tborderRadius?: number;\n\n\t/**\n\t * xAxis related props.\n\t *\n\t * @see https://recharts.org/en-US/api/XAxis\n\t */\n\txAxisProps?: Record<string, unknown>;\n\n\t/**\n\t * yAxis related props.\n\t *\n\t * @see https://recharts.org/en-US/api/YAxis\n\t */\n\tyAxisProps?: Record<string, unknown>;\n\n\t/**\n\t * Tooltip related props.\n\t *\n\t * @see https://recharts.org/en-US/api/Tooltip\n\t */\n\ttooltipProps?: Record<string, unknown>;\n\n\t/**\n\t * Active bar index.\n\t *\n\t * @see https://recharts.org/en-US/api/Bar#activeBar\n\t */\n\tactiveBar?: BarProps['activeBar'];\n}\n\nconst BarChart = ( {\n\tdata,\n\tdataKeys = [],\n\tcolors = [],\n\tlayout = 'horizontal', // horizontal, vertical\n\tstacked = false,\n\tshowXAxis = true,\n\tshowYAxis = true,\n\tshowTooltip = true,\n\ttooltipIndicator = 'dot', // dot, line, dashed\n\ttooltipLabelKey,\n\tshowLegend = false,\n\tshowCartesianGrid = true,\n\txTickFormatter,\n\tyTickFormatter,\n\txAxisDataKey,\n\tyAxisDataKey,\n\txAxisFontSize = 'sm', // sm, md, lg\n\txAxisFontColor = '#6B7280',\n\tyAxisFontColor = '#6B7280',\n\tchartWidth = 350,\n\tchartHeight = 200,\n\tborderRadius = 8,\n\txAxisProps,\n\tyAxisProps,\n\ttooltipProps,\n\tactiveBar,\n}: BarChartProps ) => {\n\tconst defaultColors = [ { fill: '#7DD3FC' }, { fill: '#2563EB' } ];\n\n\tconst appliedColors = colors.length > 0 ? colors : defaultColors;\n\n\tconst fontSizeMap = {\n\t\tsm: '12px',\n\t\tmd: '14px',\n\t\tlg: '16px',\n\t};\n\n\tconst fontSizeVariant = fontSizeMap[ xAxisFontSize ] || fontSizeMap.sm;\n\n\tif ( ! data || data.length === 0 ) {\n\t\treturn (\n\t\t\t<Label size=\"sm\" variant=\"help\">\n\t\t\t\tNo data available\n\t\t\t</Label>\n\t\t);\n\t}\n\n\treturn (\n\t\t<ResponsiveContainer width={ chartWidth } height={ chartHeight }>\n\t\t\t<BarChartWrapper\n\t\t\t\tdata={ data }\n\t\t\t\tmargin={ { left: 14, right: 14 } }\n\t\t\t\tlayout={ layout }\n\t\t\t>\n\t\t\t\t{ showCartesianGrid && <CartesianGrid vertical={ false } /> }\n\n\t\t\t\t{ layout === 'horizontal' && showXAxis && (\n\t\t\t\t\t<XAxis\n\t\t\t\t\t\t{ ...xAxisProps }\n\t\t\t\t\t\tdataKey={ xAxisDataKey }\n\t\t\t\t\t\ttickLine={ false }\n\t\t\t\t\t\taxisLine={ false }\n\t\t\t\t\t\ttickMargin={ 8 }\n\t\t\t\t\t\ttickFormatter={ xTickFormatter }\n\t\t\t\t\t\ttick={ {\n\t\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\t\tfill: xAxisFontColor,\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ layout === 'horizontal' && showYAxis && (\n\t\t\t\t\t<YAxis\n\t\t\t\t\t\t{ ...yAxisProps }\n\t\t\t\t\t\tdataKey={ yAxisDataKey }\n\t\t\t\t\t\ttickLine={ false }\n\t\t\t\t\t\ttickMargin={ 10 }\n\t\t\t\t\t\taxisLine={ false }\n\t\t\t\t\t\ttickFormatter={ yTickFormatter }\n\t\t\t\t\t\ttick={ {\n\t\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\t\tfill: yAxisFontColor,\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ layout === 'vertical' && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<XAxis\n\t\t\t\t\t\t\t{ ...xAxisProps }\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tdataKey={ xAxisDataKey }\n\t\t\t\t\t\t\thide\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<YAxis\n\t\t\t\t\t\t\t{ ...yAxisProps }\n\t\t\t\t\t\t\tdataKey={ yAxisDataKey }\n\t\t\t\t\t\t\ttype=\"category\"\n\t\t\t\t\t\t\ttickLine={ false }\n\t\t\t\t\t\t\ttickMargin={ 10 }\n\t\t\t\t\t\t\taxisLine={ false }\n\t\t\t\t\t\t\ttickFormatter={ xTickFormatter }\n\t\t\t\t\t\t\ttick={ {\n\t\t\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\t\t\tfill: yAxisFontColor,\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t) }\n\n\t\t\t\t{ showYAxis && <YAxis dataKey={ yAxisDataKey } /> }\n\t\t\t\t{ showTooltip && (\n\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t{ ...tooltipProps }\n\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t<ChartTooltipContent\n\t\t\t\t\t\t\t\tindicator={ tooltipIndicator }\n\t\t\t\t\t\t\t\tlabelKey={ tooltipLabelKey }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ showLegend && (\n\t\t\t\t\t<Legend\n\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t<ChartLegendContent\n\t\t\t\t\t\t\t\tfontSizeVariant={ fontSizeVariant }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ dataKeys.map( ( key, index ) => {\n\t\t\t\t\tlet radius: number | [number, number, number, number];\n\n\t\t\t\t\tif ( stacked ) {\n\t\t\t\t\t\tif ( index === 0 ) {\n\t\t\t\t\t\t\tradius = [ 0, 0, 4, 4 ]; // Bottom bar\n\t\t\t\t\t\t} else if ( index === dataKeys.length - 1 ) {\n\t\t\t\t\t\t\tradius = [ 4, 4, 0, 0 ]; // Top bar\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tradius = 0; // Middle bars have no radius\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tradius = borderRadius;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Bar\n\t\t\t\t\t\t\tkey={ key }\n\t\t\t\t\t\t\tdataKey={ key }\n\t\t\t\t\t\t\tfill={ appliedColors[ index ]?.fill }\n\t\t\t\t\t\t\tradius={ radius }\n\t\t\t\t\t\t\tstackId={ stacked ? 'a' : undefined }\n\t\t\t\t\t\t\tactiveBar={ activeBar }\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t} ) }\n\t\t\t</BarChartWrapper>\n\t\t</ResponsiveContainer>\n\t);\n};\n\nexport default BarChart;\n"],"names":["BarChart","data","dataKeys","colors","layout","stacked","showXAxis","showYAxis","showTooltip","tooltipIndicator","tooltipLabelKey","showLegend","showCartesianGrid","xTickFormatter","yTickFormatter","xAxisDataKey","yAxisDataKey","xAxisFontSize","xAxisFontColor","yAxisFontColor","chartWidth","chartHeight","borderRadius","xAxisProps","yAxisProps","tooltipProps","activeBar","defaultColors","appliedColors","fontSizeMap","fontSizeVariant","Label","jsx","ResponsiveContainer","jsxs","BarChartWrapper","CartesianGrid","XAxis","YAxis","Fragment","Tooltip","ChartTooltipContent","Legend","ChartLegendContent","key","index","radius","Bar"],"mappings":"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"}