{"version":3,"file":"bar-chart.cjs.js","sources":["../../../src/components/bar-chart/bar-chart.tsx"],"sourcesContent":["import {\n\tBarChart as BarChartWrapper,\n\tBar,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tResponsiveContainer,\n\ttype BarProps,\n} from 'recharts';\nimport ChartLegendContent from './chart-legend-content';\nimport ChartTooltipContent from './chart-tooltip-content';\nimport Label from '../label';\n\ninterface DataItem {\n\t[key: string]: number | string;\n}\ninterface Color {\n\tfill: string;\n}\n\ninterface BarChartProps {\n\t/** An array of objects representing the source data for the chart. */\n\tdata: DataItem[];\n\n\t/** An array of strings representing the keys to access data in each data object. Used for identifying different data series. */\n\tdataKeys: string[];\n\n\t/** An array of color strings that determine the colors for each data series in the chart. */\n\tcolors?: Color[];\n\n\t/** Defines the layout of Bar Chart. if you want to check how layout `vertical` works, then you need to clear the xAxisDataKey value and set showCartesianGrid to false. */\n\tlayout?: 'horizontal' | 'vertical';\n\n\t/** Defines are the chart bars are stacked. */\n\tstacked?: boolean;\n\n\t/** Whether to render the `<XAxis />` component for the x-axis. */\n\tshowXAxis?: boolean;\n\n\t/** Whether to render the `<YAxis />` component for the y-axis. */\n\tshowYAxis?: boolean;\n\n\t/** Toggle the visibility of the tooltip on hover, displaying detailed information for each data point. */\n\tshowTooltip?: boolean;\n\n\t/** The tooltip indicator. It can be `dot`, `line` or `dashed`. */\n\ttooltipIndicator?: 'dot' | 'line' | 'dashed';\n\n\t/** Present tooltip lable key. E.g. for this data element: `{ month: 'January', desktop: 186, mobile: 80 }` if set lableKye to 'month' the tooltip will display the month name (like 'January'). */\n\ttooltipLabelKey?: string;\n\n\t/** Whether to render the `<Legend />` component to identify data series. */\n\tshowLegend?: boolean;\n\n\t/** Whether to display the `<CartesianGrid />`, adding horizontal and vertical grid lines. */\n\tshowCartesianGrid?: boolean;\n\n\t/** A function used to format the ticks on the axes, e.g., ```const monthFormatter = ( value: string ) => value.slice( 0, 3 );``` */\n\txTickFormatter?: ( value: string ) => string;\n\n\t/** A function used to format the ticks on the y-axis. */\n\tyTickFormatter?: ( value: string ) => string;\n\n\t/** The key in the data objects representing values for the x-axis. This is used to access the x-axis values from each data entry. */\n\txAxisDataKey?: string;\n\n\t/** The key in the data objects representing values for the y-axis. This is used to access the y-axis values from each data entry. */\n\tyAxisDataKey?: string;\n\n\t/** Font size for the labels on the x-axis. */\n\txAxisFontSize?: 'sm' | 'md' | 'lg';\n\n\t/** Font color for the labels on the x-axis. */\n\txAxisFontColor?: string;\n\n\t/** Font color for the labels on the y-axis. */\n\tyAxisFontColor?: string;\n\n\t/** Width of the chart container. */\n\tchartWidth?: number;\n\n\t/** Height of the chart container. */\n\tchartHeight?: number;\n\n\t/** Border radius of chart bar. */\n\tborderRadius?: number;\n\n\t/**\n\t * xAxis related props.\n\t *\n\t * @see https://recharts.org/en-US/api/XAxis\n\t */\n\txAxisProps?: Record<string, unknown>;\n\n\t/**\n\t * yAxis related props.\n\t *\n\t * @see https://recharts.org/en-US/api/YAxis\n\t */\n\tyAxisProps?: Record<string, unknown>;\n\n\t/**\n\t * Tooltip related props.\n\t *\n\t * @see https://recharts.org/en-US/api/Tooltip\n\t */\n\ttooltipProps?: Record<string, unknown>;\n\n\t/**\n\t * Active bar index.\n\t *\n\t * @see https://recharts.org/en-US/api/Bar#activeBar\n\t */\n\tactiveBar?: BarProps['activeBar'];\n}\n\nconst BarChart = ( {\n\tdata,\n\tdataKeys = [],\n\tcolors = [],\n\tlayout = 'horizontal', // horizontal, vertical\n\tstacked = false,\n\tshowXAxis = true,\n\tshowYAxis = true,\n\tshowTooltip = true,\n\ttooltipIndicator = 'dot', // dot, line, dashed\n\ttooltipLabelKey,\n\tshowLegend = false,\n\tshowCartesianGrid = true,\n\txTickFormatter,\n\tyTickFormatter,\n\txAxisDataKey,\n\tyAxisDataKey,\n\txAxisFontSize = 'sm', // sm, md, lg\n\txAxisFontColor = '#6B7280',\n\tyAxisFontColor = '#6B7280',\n\tchartWidth = 350,\n\tchartHeight = 200,\n\tborderRadius = 8,\n\txAxisProps,\n\tyAxisProps,\n\ttooltipProps,\n\tactiveBar,\n}: BarChartProps ) => {\n\tconst defaultColors = [ { fill: '#7DD3FC' }, { fill: '#2563EB' } ];\n\n\tconst appliedColors = colors.length > 0 ? colors : defaultColors;\n\n\tconst fontSizeMap = {\n\t\tsm: '12px',\n\t\tmd: '14px',\n\t\tlg: '16px',\n\t};\n\n\tconst fontSizeVariant = fontSizeMap[ xAxisFontSize ] || fontSizeMap.sm;\n\n\tif ( ! data || data.length === 0 ) {\n\t\treturn (\n\t\t\t<Label size=\"sm\" variant=\"help\">\n\t\t\t\tNo data available\n\t\t\t</Label>\n\t\t);\n\t}\n\n\treturn (\n\t\t<ResponsiveContainer width={ chartWidth } height={ chartHeight }>\n\t\t\t<BarChartWrapper\n\t\t\t\tdata={ data }\n\t\t\t\tmargin={ { left: 14, right: 14 } }\n\t\t\t\tlayout={ layout }\n\t\t\t>\n\t\t\t\t{ showCartesianGrid && <CartesianGrid vertical={ false } /> }\n\n\t\t\t\t{ layout === 'horizontal' && showXAxis && (\n\t\t\t\t\t<XAxis\n\t\t\t\t\t\t{ ...xAxisProps }\n\t\t\t\t\t\tdataKey={ xAxisDataKey }\n\t\t\t\t\t\ttickLine={ false }\n\t\t\t\t\t\taxisLine={ false }\n\t\t\t\t\t\ttickMargin={ 8 }\n\t\t\t\t\t\ttickFormatter={ xTickFormatter }\n\t\t\t\t\t\ttick={ {\n\t\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\t\tfill: xAxisFontColor,\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ layout === 'horizontal' && showYAxis && (\n\t\t\t\t\t<YAxis\n\t\t\t\t\t\t{ ...yAxisProps }\n\t\t\t\t\t\tdataKey={ yAxisDataKey }\n\t\t\t\t\t\ttickLine={ false }\n\t\t\t\t\t\ttickMargin={ 10 }\n\t\t\t\t\t\taxisLine={ false }\n\t\t\t\t\t\ttickFormatter={ yTickFormatter }\n\t\t\t\t\t\ttick={ {\n\t\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\t\tfill: yAxisFontColor,\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ layout === 'vertical' && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<XAxis\n\t\t\t\t\t\t\t{ ...xAxisProps }\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tdataKey={ xAxisDataKey }\n\t\t\t\t\t\t\thide\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<YAxis\n\t\t\t\t\t\t\t{ ...yAxisProps }\n\t\t\t\t\t\t\tdataKey={ yAxisDataKey }\n\t\t\t\t\t\t\ttype=\"category\"\n\t\t\t\t\t\t\ttickLine={ false }\n\t\t\t\t\t\t\ttickMargin={ 10 }\n\t\t\t\t\t\t\taxisLine={ false }\n\t\t\t\t\t\t\ttickFormatter={ xTickFormatter }\n\t\t\t\t\t\t\ttick={ {\n\t\t\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\t\t\tfill: yAxisFontColor,\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t) }\n\n\t\t\t\t{ showYAxis && <YAxis dataKey={ yAxisDataKey } /> }\n\t\t\t\t{ showTooltip && (\n\t\t\t\t\t<Tooltip\n\t\t\t\t\t\t{ ...tooltipProps }\n\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t<ChartTooltipContent\n\t\t\t\t\t\t\t\tindicator={ tooltipIndicator }\n\t\t\t\t\t\t\t\tlabelKey={ tooltipLabelKey }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ showLegend && (\n\t\t\t\t\t<Legend\n\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t<ChartLegendContent\n\t\t\t\t\t\t\t\tfontSizeVariant={ fontSizeVariant }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ dataKeys.map( ( key, index ) => {\n\t\t\t\t\tlet radius: number | [number, number, number, number];\n\n\t\t\t\t\tif ( stacked ) {\n\t\t\t\t\t\tif ( index === 0 ) {\n\t\t\t\t\t\t\tradius = [ 0, 0, 4, 4 ]; // Bottom bar\n\t\t\t\t\t\t} else if ( index === dataKeys.length - 1 ) {\n\t\t\t\t\t\t\tradius = [ 4, 4, 0, 0 ]; // Top bar\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tradius = 0; // Middle bars have no radius\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tradius = borderRadius;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Bar\n\t\t\t\t\t\t\tkey={ key }\n\t\t\t\t\t\t\tdataKey={ key }\n\t\t\t\t\t\t\tfill={ appliedColors[ index ]?.fill }\n\t\t\t\t\t\t\tradius={ radius }\n\t\t\t\t\t\t\tstackId={ stacked ? 'a' : undefined }\n\t\t\t\t\t\t\tactiveBar={ activeBar }\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t} ) }\n\t\t\t</BarChartWrapper>\n\t\t</ResponsiveContainer>\n\t);\n};\n\nexport default BarChart;\n"],"names":["BarChart","data","dataKeys","colors","layout","stacked","showXAxis","showYAxis","showTooltip","tooltipIndicator","tooltipLabelKey","showLegend","showCartesianGrid","xTickFormatter","yTickFormatter","xAxisDataKey","yAxisDataKey","xAxisFontSize","xAxisFontColor","yAxisFontColor","chartWidth","chartHeight","borderRadius","xAxisProps","yAxisProps","tooltipProps","activeBar","defaultColors","appliedColors","fontSizeMap","fontSizeVariant","Label","jsx","ResponsiveContainer","jsxs","BarChartWrapper","CartesianGrid","XAxis","YAxis","Fragment","Tooltip","ChartTooltipContent","Legend","ChartLegendContent","key","index","radius","Bar"],"mappings":"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"}