{"version":3,"file":"line-chart.cjs.js","sources":["../../../src/components/line-chart/line-chart.tsx"],"sourcesContent":["import {\n\tLineChart as LineChartWrapper,\n\tLine,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tResponsiveContainer,\n} from 'recharts';\nimport ChartTooltipContent from './chart-tooltip-content';\nimport Label from '../label';\nimport type { CategoricalChartProps } from 'recharts/types/chart/generateCategoricalChart';\nimport { type ReactNode } from 'react';\n\n// Default color constants\nconst DEFAULT_FONT_COLOR = '#6B7280';\nconst DEFAULT_GRID_COLOR = '#E5E7EB';\nconst DEFAULT_LINE_COLORS = [ { stroke: '#2563EB' }, { stroke: '#38BDF8' } ];\n\ninterface DataItem {\n\t[key: string]: number | string;\n}\ninterface Color {\n\tstroke: string;\n}\n\ninterface LineChartProps {\n\t/** An array of objects representing the source data for the chart. */\n\tdata: DataItem[];\n\n\t/** An array of strings representing the keys to access data in each data object. Used for identifying different data series. */\n\tdataKeys: string[];\n\n\t/** An array of color objects that determine the stroke colors for each data series in the chart. */\n\tcolors?: Color[];\n\n\t/** Whether to render the `<XAxis />` component for the x-axis. */\n\tshowXAxis?: boolean;\n\n\t/** Whether to render the `<YAxis />` component for the y-axis. */\n\tshowYAxis?: boolean;\n\n\t/** Toggle the visibility of the tooltip on hover, displaying detailed information for each data point. */\n\tshowTooltip?: boolean;\n\n\t/** The tooltip indicator. It can be `dot`, `line`, or `dashed`. */\n\ttooltipIndicator?: 'dot' | 'line' | 'dashed';\n\n\t/** The key to use for the tooltip label. */\n\ttooltipLabelKey?: string;\n\n\t/** Whether to display the `<CartesianGrid />`, adding horizontal and vertical grid lines. */\n\tshowCartesianGrid?: boolean;\n\n\t/** A function used to format the ticks on the x-axis, e.g., for formatting dates or numbers. */\n\txAxisTickFormatter?: ( value: string ) => string;\n\n\t/**\n\t * A function used to format the ticks on the x-axis, e.g., for formatting dates or numbers.\n\t * @deprecated Use `xAxisTickFormatter` instead.\n\t */\n\ttickFormatter?: ( value: string ) => string;\n\n\t/** A function used to format the ticks on the y-axis, e.g., for converting 1000 to 1K. */\n\tyAxisTickFormatter?: ( value: number ) => string;\n\n\t/** The key in the data objects representing values for the x-axis. */\n\txAxisDataKey?: string;\n\n\t/** The key in the data objects representing values for the y-axis. */\n\tyAxisDataKey?: string;\n\n\t/** Font size for the labels on the x-axis. */\n\txAxisFontSize?: 'sm' | 'md' | 'lg';\n\n\t/** Font color for the labels on the x-axis. */\n\txAxisFontColor?: string;\n\n\t/**\n\t * Font color for the labels on the y-axis.\n\t * When biaxial is true, you can provide an array of two colors [leftAxisColor, rightAxisColor].\n\t * If a single color is provided, it will be used for both axes.\n\t */\n\tyAxisFontColor?: string | string[];\n\n\t/** Width of the chart container. */\n\tchartWidth?: number | string;\n\n\t/** Height of the chart container. */\n\tchartHeight?: number | string;\n\n\t/** Determines whether dots are shown on each data point. */\n\twithDots?: boolean;\n\n\t/**\n\t * Line chart Wrapper props to apply additional props to the wrapper component. Ex. `margin`, or `onClick` etc.\n\t * @see https://recharts.org/en-US/api/LineChart\n\t */\n\tlineChartWrapperProps?: Omit<\n\t\tCategoricalChartProps,\n\t\t'width' | 'height' | 'data'\n\t>;\n\t/**\n\t * The stroke dasharray for the Cartesian grid.\n\t * @default '3 3'\n\t * @see https://recharts.org/en-US/api/CartesianGrid\n\t */\n\tstrokeDasharray?: string;\n\n\t/**\n\t * The color of the Cartesian grid lines.\n\t * @default '#E5E7EB'\n\t */\n\tgridColor?: string;\n\n\t/**\n\t * Biaxial chart.\n\t */\n\tbiaxial?: boolean;\n\n\t/**\n\t * Custom component to display when no data is available.\n\t * If not provided, a default \"No data available\" message will be displayed.\n\t */\n\tnoDataComponent?: ReactNode;\n}\n\nconst LineChart = ( {\n\tdata,\n\tdataKeys = [],\n\tcolors = [],\n\tshowXAxis = false,\n\tshowYAxis = false,\n\tshowTooltip = true,\n\ttooltipIndicator = 'dot', // dot, line, dashed\n\ttooltipLabelKey,\n\tshowCartesianGrid = true,\n\txAxisTickFormatter,\n\tyAxisTickFormatter,\n\ttickFormatter,\n\txAxisDataKey,\n\tyAxisDataKey,\n\txAxisFontSize = 'sm', // sm, md, lg\n\txAxisFontColor = DEFAULT_FONT_COLOR,\n\tyAxisFontColor = DEFAULT_FONT_COLOR,\n\tchartWidth = 350,\n\tchartHeight = 200,\n\twithDots = false,\n\tlineChartWrapperProps,\n\tstrokeDasharray = '3 3',\n\tgridColor = DEFAULT_GRID_COLOR,\n\tbiaxial = false,\n\tnoDataComponent,\n}: LineChartProps ) => {\n\tconst appliedColors = colors.length > 0 ? colors : DEFAULT_LINE_COLORS;\n\n\tconst fontSizeMap = {\n\t\tsm: '12px',\n\t\tmd: '14px',\n\t\tlg: '16px',\n\t};\n\n\tconst fontSizeVariant = fontSizeMap[ xAxisFontSize ] || fontSizeMap.sm;\n\n\t// Handle Y-axis colors for biaxial chart\n\tconst getYAxisFontColor = ( index = 0 ) => {\n\t\tif ( Array.isArray( yAxisFontColor ) ) {\n\t\t\treturn (\n\t\t\t\tyAxisFontColor[ index ] || yAxisFontColor[ 0 ] || DEFAULT_FONT_COLOR\n\t\t\t);\n\t\t}\n\t\treturn yAxisFontColor;\n\t};\n\n\tif ( ! data || data.length === 0 ) {\n\t\treturn (\n\t\t\tnoDataComponent || (\n\t\t\t\t<Label size=\"sm\" variant=\"help\">\n\t\t\t\t\tNo data available\n\t\t\t\t</Label>\n\t\t\t)\n\t\t);\n\t}\n\n\treturn (\n\t\t<ResponsiveContainer width={ chartWidth } height={ chartHeight }>\n\t\t\t<LineChartWrapper { ...lineChartWrapperProps } data={ data }>\n\t\t\t\t{ showCartesianGrid && (\n\t\t\t\t\t<CartesianGrid\n\t\t\t\t\t\tstrokeDasharray={ strokeDasharray }\n\t\t\t\t\t\thorizontal={ false }\n\t\t\t\t\t\tstroke={ gridColor }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t<XAxis\n\t\t\t\t\tdataKey={ xAxisDataKey }\n\t\t\t\t\ttickLine={ false }\n\t\t\t\t\taxisLine={ false }\n\t\t\t\t\ttickMargin={ 8 }\n\t\t\t\t\ttickFormatter={ xAxisTickFormatter || tickFormatter }\n\t\t\t\t\ttick={ {\n\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\tfill: xAxisFontColor,\n\t\t\t\t\t} }\n\t\t\t\t\thide={ ! showXAxis }\n\t\t\t\t\tinterval=\"equidistantPreserveStart\"\n\t\t\t\t/>\n\t\t\t\t<YAxis\n\t\t\t\t\tyAxisId=\"left\"\n\t\t\t\t\tdataKey={ biaxial ? dataKeys[ 0 ] : yAxisDataKey }\n\t\t\t\t\ttickLine={ false }\n\t\t\t\t\taxisLine={ false }\n\t\t\t\t\ttickMargin={ 8 }\n\t\t\t\t\ttickFormatter={ yAxisTickFormatter }\n\t\t\t\t\ttick={ {\n\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\tfill: getYAxisFontColor( 0 ),\n\t\t\t\t\t} }\n\t\t\t\t\thide={ ! showYAxis }\n\t\t\t\t\torientation=\"left\"\n\t\t\t\t/>\n\n\t\t\t\t{ biaxial && dataKeys.length > 1 && (\n\t\t\t\t\t<YAxis\n\t\t\t\t\t\tyAxisId=\"right\"\n\t\t\t\t\t\tdataKey={ dataKeys[ 1 ] }\n\t\t\t\t\t\ttickLine={ false }\n\t\t\t\t\t\taxisLine={ false }\n\t\t\t\t\t\ttickMargin={ 8 }\n\t\t\t\t\t\ttickFormatter={ yAxisTickFormatter }\n\t\t\t\t\t\ttick={ {\n\t\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\t\tfill: getYAxisFontColor( 1 ),\n\t\t\t\t\t\t} }\n\t\t\t\t\t\torientation=\"right\"\n\t\t\t\t\t\thide={ ! showYAxis }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ showTooltip && (\n\t\t\t\t\t<Tooltip\n\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t<ChartTooltipContent\n\t\t\t\t\t\t\t\tindicator={ tooltipIndicator }\n\t\t\t\t\t\t\t\tlabelKey={ tooltipLabelKey }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ dataKeys.map( ( key, index ) => {\n\t\t\t\t\t// Determine which Y-axis this line should use\n\t\t\t\t\tlet axisId = 'left';\n\t\t\t\t\tif ( biaxial && index > 0 ) {\n\t\t\t\t\t\taxisId = 'right';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Line\n\t\t\t\t\t\t\tkey={ key }\n\t\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\t\tdataKey={ key }\n\t\t\t\t\t\t\tstroke={ appliedColors[ index ].stroke }\n\t\t\t\t\t\t\tfill={ appliedColors[ index ].stroke }\n\t\t\t\t\t\t\tstrokeWidth={ 2 }\n\t\t\t\t\t\t\tdot={ withDots }\n\t\t\t\t\t\t\tyAxisId={ axisId }\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t} ) }\n\t\t\t</LineChartWrapper>\n\t\t</ResponsiveContainer>\n\t);\n};\n\nexport default LineChart;\n"],"names":["DEFAULT_FONT_COLOR","DEFAULT_GRID_COLOR","DEFAULT_LINE_COLORS","LineChart","data","dataKeys","colors","showXAxis","showYAxis","showTooltip","tooltipIndicator","tooltipLabelKey","showCartesianGrid","xAxisTickFormatter","yAxisTickFormatter","tickFormatter","xAxisDataKey","yAxisDataKey","xAxisFontSize","xAxisFontColor","yAxisFontColor","chartWidth","chartHeight","withDots","lineChartWrapperProps","strokeDasharray","gridColor","biaxial","noDataComponent","appliedColors","fontSizeMap","fontSizeVariant","getYAxisFontColor","index","jsx","Label","ResponsiveContainer","jsxs","LineChartWrapper","CartesianGrid","XAxis","YAxis","Tooltip","ChartTooltipContent","key","axisId","Line"],"mappings":"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"}