{"version":3,"file":"button-group.cjs.js","sources":["../../../src/components/button-group/button-group.tsx"],"sourcesContent":["import React, {\n\tuseCallback,\n\tforwardRef,\n\tisValidElement,\n\tcreateContext,\n\ttype ReactNode,\n\tReactElement,\n} from 'react';\nimport { cn } from '@/utilities/functions';\n\n/**\n * Context for managing the ButtonGroup state.\n */\nexport const ButtonGroupContext = createContext<{\n\tactiveItem: string | null;\n\tonChange:( value: ButtonValue ) => void;\n\tsize: 'xs' | 'sm' | 'md';\n\ticonPosition: 'left' | 'right';\n\t\t}>( {\n\t\t\tactiveItem: null,\n\t\t\tonChange: () => {},\n\t\t\tsize: 'md',\n\t\t\ticonPosition: 'left',\n\t\t} );\n\n/** Defines the common props shared by components. */\nexport interface CommonProps {\n\t/** Additional class names for styling. */\n\tclassName?: string;\n}\n\n/** Type for the value passed to the onChange callback. */\nexport interface ButtonValue {\n\tevent: React.MouseEvent<HTMLButtonElement>;\n\tvalue: {\n\t\tslug: string;\n\t\ttext: string;\n\t};\n}\n\n/** Props for the ButtonGroup component. */\nexport interface ButtonGroupProps extends CommonProps {\n\t/** Child elements, typically Button components. */\n\tchildren: ReactNode;\n\t/** Active item slug in the group. */\n\tactiveItem?: string | null;\n\t/** Callback when the active item changes. */\n\tonChange?: ( value: ButtonValue ) => void;\n\t/** Size of the buttons in the group. */\n\tsize?: 'xs' | 'sm' | 'md';\n\t/** Position of the icon inside the button. */\n\ticonPosition?: 'left' | 'right';\n}\nexport const ButtonGroup = ( {\n\tchildren,\n\tactiveItem = null,\n\tonChange,\n\tclassName,\n\tsize = 'md',\n\ticonPosition = 'left',\n}: ButtonGroupProps ) => {\n\tconst handleChange = useCallback(\n\t\t( value: ButtonValue ) => {\n\t\t\tif ( onChange ) {\n\t\t\t\tonChange( value );\n\t\t\t}\n\t\t},\n\t\t[ onChange ]\n\t);\n\n\tconst groupClassName = cn(\n\t\t'box-border flex border border-border-subtle border-solid rounded',\n\t\tclassName\n\t);\n\n\treturn (\n\t\t<div className={ groupClassName }>\n\t\t\t<ButtonGroupContext.Provider\n\t\t\t\tvalue={ {\n\t\t\t\t\tactiveItem,\n\t\t\t\t\tonChange: handleChange,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonPosition,\n\t\t\t\t} }\n\t\t\t>\n\t\t\t\t{ React.Children.map( children, ( child, index ) => {\n\t\t\t\t\tif ( ! isValidElement( child ) ) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tconst isFirstChild = index === 0;\n\t\t\t\t\tconst isLastChild =\n\t\t\t\t\t\tindex === React.Children.count( children ) - 1;\n\t\t\t\t\treturn React.cloneElement( child, {\n\t\t\t\t\t\t...child.props,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tisFirstChild,\n\t\t\t\t\t\tisLastChild,\n\t\t\t\t\t} );\n\t\t\t\t} ) }\n\t\t\t</ButtonGroupContext.Provider>\n\t\t</div>\n\t);\n};\n\n/** Props for the Button component. */\nexport interface ButtonProps extends CommonProps {\n\t/** Unique slug identifying the button. */\n\tslug: string;\n\t/** Text content of the button. */\n\ttext: string;\n\t/** Icon displayed inside the button. */\n\ticon?: ReactElement;\n\t/** Marks the button as disabled. */\n\tdisabled?: boolean;\n\t/** Indicates if the button is the first child in the group. */\n\tisFirstChild?: boolean;\n\t/** Indicates if the button is the last child in the group. */\n\tisLastChild?: boolean;\n}\n\nexport const ButtonComponent = (\n\t{\n\t\tslug,\n\t\ttext,\n\t\ticon,\n\t\tclassName,\n\t\tdisabled = false,\n\t\tisFirstChild,\n\t\tisLastChild,\n\t\t...rest\n\t}: ButtonProps,\n\tref: React.Ref<HTMLButtonElement>\n) => {\n\tconst providerValue = React.useContext( ButtonGroupContext );\n\n\tif ( ! providerValue ) {\n\t\tthrow new Error( 'Button should be used inside Button Group' );\n\t}\n\n\tconst { activeItem, onChange, size, iconPosition } = providerValue;\n\n\tconst sizes = {\n\t\txs: 'py-1 px-1 text-sm gap-0.5 [&>svg]:size-4',\n\t\tsm: 'py-2 px-2 text-base gap-1 [&>svg]:size-4',\n\t\tmd: 'py-2.5 px-2.5 text-base gap-1 [&>svg]:size-5',\n\t};\n\n\tconst baseClasses =\n\t\t'bg-background-primary text-primary cursor-pointer flex items-center justify-center';\n\n\t// Button hover classes.\n\tconst hoverClasses = 'hover:bg-button-tertiary-hover';\n\n\t// Button focus classes.\n\tconst focusClasses = 'focus:outline-none';\n\n\t// Button disabled classes.\n\tconst disabledClasses = disabled\n\t\t? 'text-text-disabled cursor-not-allowed'\n\t\t: '';\n\n\tconst firstChildClasses = isFirstChild\n\t\t? 'rounded-tl rounded-bl border-0 border-r border-border-subtle'\n\t\t: '';\n\tconst lastChildClasses = isLastChild\n\t\t? 'rounded-tr rounded-br border-0'\n\t\t: '';\n\tconst borderClasses = 'border-0 border-r border-border-subtle border-solid';\n\tconst activeClasses = activeItem === slug ? 'bg-button-disabled' : '';\n\n\tconst buttonClassName = cn(\n\t\tbaseClasses,\n\t\thoverClasses,\n\t\tfocusClasses,\n\t\tdisabledClasses,\n\t\tsizes[ size ],\n\t\tborderClasses,\n\t\tactiveClasses,\n\t\tfirstChildClasses,\n\t\tlastChildClasses,\n\t\tclassName\n\t);\n\n\tconst handleClick = ( event: React.MouseEvent<HTMLButtonElement> ) => {\n\t\tonChange( { event, value: { slug, text } } );\n\t};\n\n\treturn (\n\t\t<button\n\t\t\tref={ ref }\n\t\t\tclassName={ buttonClassName }\n\t\t\tdisabled={ disabled }\n\t\t\tonClick={ handleClick }\n\t\t\t{ ...rest }\n\t\t>\n\t\t\t{ iconPosition === 'left' && icon && (\n\t\t\t\t<span className=\"mr-1\">{ icon }</span>\n\t\t\t) }\n\t\t\t{ text }\n\t\t\t{ iconPosition === 'right' && icon && (\n\t\t\t\t<span className=\"ml-1\">{ icon }</span>\n\t\t\t) }\n\t\t</button>\n\t);\n};\nconst Button = forwardRef( ButtonComponent );\nButton.displayName = 'Button';\n\nconst exports = {\n\tGroup: ButtonGroup,\n\tButton,\n};\n\nexport default exports;\n"],"names":["ButtonGroupContext","createContext","ButtonGroup","children","activeItem","onChange","className","size","iconPosition","handleChange","useCallback","value","groupClassName","cn","jsx","child","index","isValidElement","isFirstChild","isLastChild","React","ButtonComponent","slug","text","icon","disabled","rest","ref","providerValue","sizes","baseClasses","hoverClasses","focusClasses","disabledClasses","firstChildClasses","lastChildClasses","borderClasses","activeClasses","buttonClassName","handleClick","event","jsxs","Button","forwardRef","exports"],"mappings":"kNAaaA,EAAqBC,EAAAA,cAK5B,CACH,WAAY,KACZ,SAAU,IAAM,CAAC,EACjB,KAAM,KACN,aAAc,MACf,CAAE,EA8BSC,EAAc,CAAE,CAC5B,SAAAC,EACA,WAAAC,EAAa,KACb,SAAAC,EACA,UAAAC,EACA,KAAAC,EAAO,KACP,aAAAC,EAAe,MAChB,IAAyB,CACxB,MAAMC,EAAeC,EAAA,YAClBC,GAAwB,CACpBN,GACJA,EAAUM,CAAM,CAElB,EACA,CAAEN,CAAS,CACZ,EAEMO,EAAiBC,EAAA,GACtB,mEACAP,CACD,EAGC,OAAAQ,EAAAA,IAAC,MAAI,CAAA,UAAYF,EAChB,SAAAE,EAAA,IAACd,EAAmB,SAAnB,CACA,MAAQ,CACP,WAAAI,EACA,SAAUK,EACV,KAAAF,EACA,aAAAC,CACD,EAEE,WAAM,SAAS,IAAKL,EAAU,CAAEY,EAAOC,IAAW,CAC9C,GAAA,CAAEC,EAAAA,eAAgBF,CAAM,EACrB,OAAA,KAER,MAAMG,EAAeF,IAAU,EACzBG,EACLH,IAAUI,EAAM,SAAS,MAAOjB,CAAS,EAAI,EACvC,OAAAiB,EAAM,aAAcL,EAAO,CACjC,GAAGA,EAAM,MACT,MAAAC,EACA,aAAAE,EACA,YAAAC,CAAA,CACC,CACD,CAAA,CAAA,CAAA,EAEJ,CAEF,EAkBaE,EAAkB,CAC9B,CACC,KAAAC,EACA,KAAAC,EACA,KAAAC,EACA,UAAAlB,EACA,SAAAmB,EAAW,GACX,aAAAP,EACA,YAAAC,EACA,GAAGO,CACJ,EACAC,IACI,CACE,MAAAC,EAAgBR,EAAM,WAAYpB,CAAmB,EAE3D,GAAK,CAAE4B,EACA,MAAA,IAAI,MAAO,2CAA4C,EAG9D,KAAM,CAAE,WAAAxB,EAAY,SAAAC,EAAU,KAAAE,EAAM,aAAAC,CAAiB,EAAAoB,EAE/CC,EAAQ,CACb,GAAI,2CACJ,GAAI,2CACJ,GAAI,8CACL,EAEMC,EACL,qFAGKC,EAAe,iCAGfC,EAAe,qBAGfC,EAAkBR,EACrB,wCACA,GAEGS,EAAoBhB,EACvB,+DACA,GACGiB,EAAmBhB,EACtB,iCACA,GACGiB,EAAgB,sDAChBC,EAAgBjC,IAAekB,EAAO,qBAAuB,GAE7DgB,EAAkBzB,EAAA,GACvBiB,EACAC,EACAC,EACAC,EACAJ,EAAOtB,CAAK,EACZ6B,EACAC,EACAH,EACAC,EACA7B,CACD,EAEMiC,EAAgBC,GAAgD,CACrEnC,EAAU,CAAE,MAAAmC,EAAO,MAAO,CAAE,KAAAlB,EAAM,KAAAC,CAAA,EAAS,CAC5C,EAGC,OAAAkB,EAAA,KAAC,SAAA,CACA,IAAAd,EACA,UAAYW,EACZ,SAAAb,EACA,QAAUc,EACR,GAAGb,EAEH,SAAA,CAAAlB,IAAiB,QAAUgB,GAC5BV,MAAC,OAAK,CAAA,UAAU,OAAS,SAAMU,EAAA,EAE9BD,EACAf,IAAiB,SAAWgB,SAC5B,OAAK,CAAA,UAAU,OAAS,SAAMA,CAAA,CAAA,CAAA,CAAA,CAEjC,CAEF,EACMkB,EAASC,aAAYtB,CAAgB,EAC3CqB,EAAO,YAAc,SAErB,MAAME,EAAU,CACf,MAAO1C,EACP,OAAAwC,CACD"}