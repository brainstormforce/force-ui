{"version":3,"file":"mention-plugin.es.js","sources":["../../../../src/components/editor-input/mention-plugin/mention-plugin.tsx"],"sourcesContent":["import React, {\n\tuseCallback,\n\tuseState,\n\tuseMemo,\n\tuseEffect,\n\tuseRef,\n} from 'react';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n\tLexicalTypeaheadMenuPlugin,\n\ttype TypeaheadMenuPluginProps,\n\ttype MenuOption,\n} from '@lexical/react/LexicalTypeaheadMenuPlugin';\nimport { $createMentionNode, $isMentionNode } from './mention-node';\nimport OptionItem from './mention-option-item';\nimport useMentionLookupService from './mention-hooks';\nimport EditorCombobox from './mention-combobox';\nimport {\n\t$createTextNode,\n\t$getSelection,\n\tCOMMAND_PRIORITY_LOW,\n\tKEY_DOWN_COMMAND,\n\tKEY_BACKSPACE_COMMAND,\n\ttype RangeSelection,\n\ttype CommandListener,\n} from 'lexical';\nimport { mergeRegister } from '@lexical/utils';\nimport { type TOptionItem } from '../editor-input';\n\nexport type Trigger = '@' | '#' | ( string & {} );\nexport type TSizes = 'lg' | 'md' | 'sm';\nexport type OptionsArray = Array<TOptionItem>;\nexport type TMenuComponent = React.ComponentType<\n\tReact.ComponentProps<typeof EditorCombobox>\n>;\nexport type TMenuItemComponent = React.ComponentType<\n\tReact.ComponentProps<typeof EditorCombobox.Item>\n>;\n\nexport interface MentionPluginProps<T = OptionsArray> {\n\toptionsArray: T;\n\tby: T extends Array<infer U>\n\t\t? U extends Record<string, unknown>\n\t\t\t? keyof U\n\t\t\t: string\n\t\t: string;\n\tsize: TSizes;\n\ttrigger: Trigger;\n\tmenuComponent?: TMenuComponent;\n\tmenuItemComponent?: TMenuItemComponent;\n\tautoSpace: boolean;\n}\n\nconst MentionPlugin = ( {\n\toptionsArray,\n\tby = 'name',\n\tsize = 'md',\n\ttrigger = '@', // Default trigger value\n\tmenuComponent: MenuComponent = EditorCombobox,\n\tmenuItemComponent: MenuItemComponent = EditorCombobox.Item,\n\tautoSpace = true,\n}: MentionPluginProps ) => {\n\tconst autoSpaceTempOff = useRef( false );\n\t// Define PUNCTUATION and other necessary variables inside the component\n\tconst PUNCTUATION =\n\t\t'\\\\.,\\\\+\\\\*\\\\?\\\\$\\\\@\\\\|#{}\\\\(\\\\)\\\\^\\\\-\\\\[\\\\]\\\\\\\\/!%\\'\"~=<>_:;';\n\n\tconst TRIGGERS = [ trigger ].join( '' ); // Use the trigger prop dynamically\n\n\tconst VALID_CHARS = '[^' + TRIGGERS + PUNCTUATION + '\\\\s]';\n\n\tconst VALID_JOINS =\n\t\t'(?:' +\n\t\t'\\\\.[ |$]|' + // E.g. \"r. \" in \"Mr. Smith\"\n\t\t' |' + // E.g. \" \" in \"Josh Duck\"\n\t\t'[' +\n\t\tPUNCTUATION +\n\t\t']|' + // E.g. \"-' in \"Salier-Hellendag\"\n\t\t')';\n\n\tconst LENGTH_LIMIT = 75;\n\n\tconst AtSignMentionsRegex = new RegExp(\n\t\t`(^|\\\\s|\\\\()([${ TRIGGERS }]((?:${ VALID_CHARS }${ VALID_JOINS }){0,${ LENGTH_LIMIT }}))$`\n\t);\n\n\t// 50 is the longest alias length limit\n\tconst ALIAS_LENGTH_LIMIT = 50;\n\n\t// Regex used to match alias\n\tconst AtSignMentionsRegexAliasRegex = new RegExp(\n\t\t`(^|\\\\s|\\\\()([${ TRIGGERS }]((?:${ VALID_CHARS }){0,${ ALIAS_LENGTH_LIMIT }}))$`\n\t);\n\n\t// Define checkForAtSignMentions function inside the component where it has access to the regex\n\tconst checkForAtSignMentions = ( text: string ) => {\n\t\tlet match = AtSignMentionsRegex.exec( text );\n\n\t\tif ( match === null ) {\n\t\t\tmatch = AtSignMentionsRegexAliasRegex.exec( text );\n\t\t}\n\t\tif ( match !== null ) {\n\t\t\t// The strategy ignores leading whitespace but we need to know its\n\t\t\t// length to add it to the leadOffset\n\t\t\tconst maybeLeadingWhitespace = match[ 1 ];\n\n\t\t\tconst matchingString = match[ 3 ];\n\t\t\tif ( matchingString.length >= 0 ) {\n\t\t\t\treturn {\n\t\t\t\t\tleadOffset: match.index + maybeLeadingWhitespace.length,\n\t\t\t\t\tmatchingString,\n\t\t\t\t\treplaceableString: match[ 2 ],\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\n\tconst [ editor ] = useLexicalComposerContext();\n\tconst [ queryString, setQueryString ] = useState<string | null>( null );\n\n\t// Use the hook to get lookup results\n\tconst results = useMentionLookupService( optionsArray, queryString, by );\n\n\tconst onSelectOption = useCallback<\n\t\tTypeaheadMenuPluginProps<\n\t\t\tMenuOption & { data: TOptionItem }\n\t\t>['onSelectOption']\n\t>(\n\t\t( selectedOption, nodeToReplace, closeMenu ) => {\n\t\t\teditor.update( () => {\n\t\t\t\tconst mentionNode = $createMentionNode(\n\t\t\t\t\tselectedOption.data,\n\t\t\t\t\tby as keyof TOptionItem,\n\t\t\t\t\tsize\n\t\t\t\t);\n\t\t\t\tif ( nodeToReplace ) {\n\t\t\t\t\tnodeToReplace.replace( mentionNode );\n\t\t\t\t}\n\t\t\t\tcloseMenu();\n\t\t\t} );\n\t\t},\n\t\t[ editor ]\n\t);\n\n\tconst options = useMemo( () => {\n\t\treturn results.map( ( result ) => new OptionItem( result ) );\n\t}, [ editor, results ] );\n\n\tconst handleAutoSpaceAfterMention = useCallback<\n\t\tCommandListener<KeyboardEvent>\n\t>(\n\t\t( event ) => {\n\t\t\tif ( ! autoSpace ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { key, ctrlKey, metaKey } = event;\n\n\t\t\tif (\n\t\t\t\tctrlKey ||\n\t\t\t\tmetaKey ||\n\t\t\t\tkey === ' ' ||\n\t\t\t\tkey.length > 1 ||\n\t\t\t\tautoSpaceTempOff.current\n\t\t\t) {\n\t\t\t\tif ( autoSpaceTempOff.current ) {\n\t\t\t\t\tautoSpaceTempOff.current = false;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst selection = $getSelection();\n\t\t\tconst { focus, anchor } = selection as RangeSelection;\n\t\t\tconst [ node ] = selection!.getNodes();\n\n\t\t\tif (\n\t\t\t\t! anchor ||\n\t\t\t\t! focus ||\n\t\t\t\tanchor?.key !== focus?.key ||\n\t\t\t\tanchor?.offset !== focus?.offset ||\n\t\t\t\t! node\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( $isMentionNode( node ) ) {\n\t\t\t\tconst textNode = $createTextNode( ' ' );\n\t\t\t\tnode.insertAfter( textNode );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\t[ editor, trigger, autoSpace ]\n\t);\n\n\tconst turnOffAutoSpaceIfNecessary = useCallback<\n\t\tCommandListener<KeyboardEvent>\n\t>(\n\t\t( event ) => {\n\t\t\tconst { key } = event;\n\t\t\tif ( key === 'Backspace' ) {\n\t\t\t\tautoSpaceTempOff.current = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\t[ autoSpaceTempOff ]\n\t);\n\n\tuseEffect( () => {\n\t\tif ( ! editor ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn mergeRegister(\n\t\t\teditor.registerCommand(\n\t\t\t\tKEY_DOWN_COMMAND,\n\t\t\t\thandleAutoSpaceAfterMention,\n\t\t\t\tCOMMAND_PRIORITY_LOW\n\t\t\t),\n\t\t\teditor.registerCommand(\n\t\t\t\tKEY_BACKSPACE_COMMAND,\n\t\t\t\tturnOffAutoSpaceIfNecessary,\n\t\t\t\tCOMMAND_PRIORITY_LOW\n\t\t\t)\n\t\t);\n\t}, [ editor, handleAutoSpaceAfterMention ] );\n\n\treturn (\n\t\t<LexicalTypeaheadMenuPlugin\n\t\t\tonQueryChange={ setQueryString }\n\t\t\tonSelectOption={ onSelectOption }\n\t\t\ttriggerFn={ checkForAtSignMentions } // Use the locally defined function\n\t\t\toptions={ options }\n\t\t\tmenuRenderFn={ (\n\t\t\t\tanchorElementRef,\n\t\t\t\t{ selectedIndex, selectOptionAndCleanUp, setHighlightedIndex }\n\t\t\t): React.JSX.Element | null => {\n\t\t\t\treturn anchorElementRef.current && !! options?.length ? (\n\t\t\t\t\t<MenuComponent size={ size }>\n\t\t\t\t\t\t{ options.map( ( option, index ) => (\n\t\t\t\t\t\t\t<MenuItemComponent\n\t\t\t\t\t\t\t\tkey={ index }\n\t\t\t\t\t\t\t\tref={ option.ref }\n\t\t\t\t\t\t\t\tsize={ size }\n\t\t\t\t\t\t\t\tselected={ index === selectedIndex }\n\t\t\t\t\t\t\t\tonMouseEnter={ () => {\n\t\t\t\t\t\t\t\t\tsetHighlightedIndex( index );\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\tonClick={ () => selectOptionAndCleanUp( option ) }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{ typeof option.data === 'string'\n\t\t\t\t\t\t\t\t\t? option.data\n\t\t\t\t\t\t\t\t\t: ( option.data?.[ by ] as string ) }\n\t\t\t\t\t\t\t</MenuItemComponent>\n\t\t\t\t\t\t) ) }\n\t\t\t\t\t</MenuComponent>\n\t\t\t\t) : null;\n\t\t\t} }\n\t\t/>\n\t);\n};\n\nexport default MentionPlugin;\n"],"names":["MentionPlugin","optionsArray","by","size","trigger","MenuComponent","EditorCombobox","MenuItemComponent","autoSpace","autoSpaceTempOff","useRef","PUNCTUATION","TRIGGERS","VALID_CHARS","VALID_JOINS","LENGTH_LIMIT","AtSignMentionsRegex","ALIAS_LENGTH_LIMIT","AtSignMentionsRegexAliasRegex","checkForAtSignMentions","text","match","maybeLeadingWhitespace","matchingString","editor","useLexicalComposerContext","queryString","setQueryString","useState","results","useMentionLookupService","onSelectOption","useCallback","selectedOption","nodeToReplace","closeMenu","mentionNode","$createMentionNode","options","useMemo","result","OptionItem","handleAutoSpaceAfterMention","event","key","ctrlKey","metaKey","selection","$getSelection","focus","anchor","node","$isMentionNode","textNode","$createTextNode","turnOffAutoSpaceIfNecessary","useEffect","mergeRegister","KEY_DOWN_COMMAND","COMMAND_PRIORITY_LOW","KEY_BACKSPACE_COMMAND","jsx","LexicalTypeaheadMenuPlugin","anchorElementRef","selectedIndex","selectOptionAndCleanUp","setHighlightedIndex","option","index"],"mappings":"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"}