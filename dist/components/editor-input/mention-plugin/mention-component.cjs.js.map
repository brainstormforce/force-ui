{"version":3,"file":"mention-component.cjs.js","sources":["../../../../src/components/editor-input/mention-plugin/mention-component.tsx"],"sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport {\n\t$getNodeByKey,\n\tCOMMAND_PRIORITY_LOW,\n\tKEY_ARROW_LEFT_COMMAND,\n\tKEY_ARROW_RIGHT_COMMAND,\n\t$isDecoratorNode,\n\t$isElementNode,\n\t$isTextNode,\n\tCommandListener,\n} from 'lexical';\nimport { mergeRegister } from '@lexical/utils';\nimport { Badge } from '@/components';\nimport type { TOptionItem } from '../editor-input';\n\nconst mapSizeToBadgeSize = ( size: string ) => {\n\tswitch ( size ) {\n\t\tcase 'sm':\n\t\t\treturn 'xs';\n\t\tcase 'md':\n\t\t\treturn 'sm';\n\t\tcase 'lg':\n\t\t\treturn 'md';\n\t\tdefault:\n\t\t\treturn 'sm';\n\t}\n};\n\nconst MentionComponent = ( {\n\tdata,\n\tby,\n\tsize,\n\tnodeKey,\n}: {\n\tdata: TOptionItem;\n\tby: keyof TOptionItem;\n\tsize: string;\n\tnodeKey: string;\n} ) => {\n\tconst [ editor ] = useLexicalComposerContext();\n\tconst disabled = ! editor.isEditable();\n\n\tconst removeMention = ( event: React.MouseEvent ) => {\n\t\tevent.stopPropagation();\n\t\tevent.preventDefault();\n\n\t\tif ( disabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\teditor.update( () => {\n\t\t\tconst node = $getNodeByKey( nodeKey );\n\t\t\tif ( ! node ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnode.remove();\n\t\t} );\n\t};\n\n\tlet renderLabel = data as unknown as string;\n\tif ( typeof data === 'object' ) {\n\t\trenderLabel = data[ by ] as string;\n\t}\n\n\tconst onArrowLeftPress = useCallback<CommandListener<KeyboardEvent>>(\n\t\t( event ) => {\n\t\t\tconst node = $getNodeByKey( nodeKey );\n\t\t\tif ( ! node || ! node.isSelected() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet handled = false;\n\t\t\tconst nodeToSelect = node.getPreviousSibling();\n\t\t\tif ( $isElementNode( nodeToSelect ) ) {\n\t\t\t\tnodeToSelect.selectEnd();\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( $isTextNode( nodeToSelect ) ) {\n\t\t\t\tnodeToSelect.select();\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( $isDecoratorNode( nodeToSelect ) ) {\n\t\t\t\tnodeToSelect.selectNext();\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( nodeToSelect === null ) {\n\t\t\t\tnode.selectPrevious();\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( handled ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\treturn handled;\n\t\t},\n\t\t[ nodeKey ]\n\t);\n\n\tconst onArrowRightPress = useCallback<CommandListener<KeyboardEvent>>(\n\t\t( event ) => {\n\t\t\tconst node = $getNodeByKey( nodeKey );\n\t\t\tif ( ! node || ! node.isSelected() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet handled = false;\n\t\t\tconst nodeToSelect = node.getNextSibling();\n\t\t\tif ( $isElementNode( nodeToSelect ) ) {\n\t\t\t\tnodeToSelect.selectStart();\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( $isTextNode( nodeToSelect ) ) {\n\t\t\t\tnodeToSelect.select( 0, 0 );\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( $isDecoratorNode( nodeToSelect ) ) {\n\t\t\t\tnodeToSelect.selectPrevious();\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( nodeToSelect === null ) {\n\t\t\t\tnode.selectNext();\n\t\t\t\thandled = true;\n\t\t\t}\n\t\t\tif ( handled ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\treturn handled;\n\t\t},\n\t\t[ nodeKey ]\n\t);\n\n\tuseEffect( () => {\n\t\tconst unregister = mergeRegister(\n\t\t\teditor.registerCommand(\n\t\t\t\tKEY_ARROW_LEFT_COMMAND,\n\t\t\t\tonArrowLeftPress,\n\t\t\t\tCOMMAND_PRIORITY_LOW\n\t\t\t),\n\t\t\teditor.registerCommand(\n\t\t\t\tKEY_ARROW_RIGHT_COMMAND,\n\t\t\t\tonArrowRightPress,\n\t\t\t\tCOMMAND_PRIORITY_LOW\n\t\t\t)\n\t\t);\n\t\treturn () => {\n\t\t\tunregister();\n\t\t};\n\t}, [ editor, onArrowLeftPress, onArrowRightPress ] );\n\n\treturn (\n\t\t<Badge\n\t\t\tclassName=\"inline-flex\"\n\t\t\ttype=\"rounded\"\n\t\t\tsize={ mapSizeToBadgeSize( size ) }\n\t\t\tlabel={ renderLabel }\n\t\t\ticon={ null }\n\t\t\tclosable={ true }\n\t\t\tonClose={ removeMention }\n\t\t\tdisabled={ disabled }\n\t\t/>\n\t);\n};\n\nexport default MentionComponent;\n"],"names":["mapSizeToBadgeSize","size","MentionComponent","data","by","nodeKey","editor","useLexicalComposerContext","disabled","removeMention","event","node","$getNodeByKey","renderLabel","onArrowLeftPress","useCallback","handled","nodeToSelect","$isElementNode","$isTextNode","$isDecoratorNode","onArrowRightPress","useEffect","unregister","mergeRegister","KEY_ARROW_LEFT_COMMAND","COMMAND_PRIORITY_LOW","KEY_ARROW_RIGHT_COMMAND","jsx","Badge"],"mappings":"8SAgBMA,EAAuBC,GAAkB,CAC9C,OAASA,EAAO,CACf,IAAK,KACG,MAAA,KACR,IAAK,KACG,MAAA,KACR,IAAK,KACG,MAAA,KACR,QACQ,MAAA,IAAA,CAEV,EAEMC,EAAmB,CAAE,CAC1B,KAAAC,EACA,GAAAC,EACA,KAAAH,EACA,QAAAI,CACD,IAKO,CACA,KAAA,CAAEC,CAAO,EAAIC,4BAA0B,EACvCC,EAAW,CAAEF,EAAO,WAAW,EAE/BG,EAAkBC,GAA6B,CACpDA,EAAM,gBAAgB,EACtBA,EAAM,eAAe,EAEhB,CAAAF,GAILF,EAAO,OAAQ,IAAM,CACd,MAAAK,EAAOC,gBAAeP,CAAQ,EAC7BM,GAGPA,EAAK,OAAO,CAAA,CACX,CACH,EAEA,IAAIE,EAAcV,EACb,OAAOA,GAAS,WACpBU,EAAcV,EAAMC,CAAG,GAGxB,MAAMU,EAAmBC,EAAA,YACtBL,GAAW,CACN,MAAAC,EAAOC,gBAAeP,CAAQ,EACpC,GAAK,CAAEM,GAAQ,CAAEA,EAAK,aACd,MAAA,GAER,IAAIK,EAAU,GACR,MAAAC,EAAeN,EAAK,mBAAmB,EACxC,OAAAO,EAAAA,eAAgBD,CAAa,IACjCA,EAAa,UAAU,EACbD,EAAA,IAENG,EAAAA,YAAaF,CAAa,IAC9BA,EAAa,OAAO,EACVD,EAAA,IAENI,EAAAA,iBAAkBH,CAAa,IACnCA,EAAa,WAAW,EACdD,EAAA,IAENC,IAAiB,OACrBN,EAAK,eAAe,EACVK,EAAA,IAENA,GACJN,EAAM,eAAe,EAEfM,CACR,EACA,CAAEX,CAAQ,CACX,EAEMgB,EAAoBN,EAAA,YACvBL,GAAW,CACN,MAAAC,EAAOC,gBAAeP,CAAQ,EACpC,GAAK,CAAEM,GAAQ,CAAEA,EAAK,aACd,MAAA,GAER,IAAIK,EAAU,GACR,MAAAC,EAAeN,EAAK,eAAe,EACpC,OAAAO,EAAAA,eAAgBD,CAAa,IACjCA,EAAa,YAAY,EACfD,EAAA,IAENG,EAAAA,YAAaF,CAAa,IACjBA,EAAA,OAAQ,EAAG,CAAE,EAChBD,EAAA,IAENI,EAAAA,iBAAkBH,CAAa,IACnCA,EAAa,eAAe,EAClBD,EAAA,IAENC,IAAiB,OACrBN,EAAK,WAAW,EACNK,EAAA,IAENA,GACJN,EAAM,eAAe,EAEfM,CACR,EACA,CAAEX,CAAQ,CACX,EAEAiB,OAAAA,EAAAA,UAAW,IAAM,CAChB,MAAMC,EAAaC,EAAA,cAClBlB,EAAO,gBACNmB,EAAA,uBACAX,EACAY,EAAAA,oBACD,EACApB,EAAO,gBACNqB,EAAA,wBACAN,EACAK,EAAAA,oBAAA,CAEF,EACA,MAAO,IAAM,CACDH,EAAA,CACZ,CACE,EAAA,CAAEjB,EAAQQ,EAAkBO,CAAkB,CAAE,EAGlDO,EAAA,IAACC,EAAA,QAAA,CACA,UAAU,cACV,KAAK,UACL,KAAO7B,EAAoBC,CAAK,EAChC,MAAQY,EACR,KAAO,KACP,SAAW,GACX,QAAUJ,EACV,SAAAD,CAAA,CACD,CAEF"}