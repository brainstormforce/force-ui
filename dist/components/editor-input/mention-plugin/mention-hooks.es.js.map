{"version":3,"file":"mention-hooks.es.js","sources":["../../../../src/components/editor-input/mention-plugin/mention-hooks.ts"],"sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { OptionsArray } from './mention-plugin';\n\n// Wrapper class for string keys\nclass StringKey {\n\tvalue: string;\n\n\tconstructor( value: string ) {\n\t\tthis.value = value;\n\t}\n}\n\ntype TBy<T> =\n\tT extends Array<infer U>\n\t\t? U extends Record<string, unknown>\n\t\t\t? keyof U & ( string & {} )\n\t\t\t: string\n\t\t: string;\n\nfunction useMentionLookupService<T = OptionsArray>(\n\toptions: T,\n\tmentionString: string | null,\n\tby: TBy<T> = 'name' as TBy<T>\n): OptionsArray {\n\tconst [ results, setResults ] = useState<OptionsArray>( [] );\n\n\t// Create instance-specific cache using WeakMap\n\tconst mentionsCacheRef = useRef<WeakMap<StringKey, OptionsArray | null>>( new WeakMap() );\n\n\t// Store reference to key objects\n\tconst keysRef = useRef<Map<string, StringKey>>( new Map() );\n\n\t// Track the previous options reference\n\tconst prevOptionsRef = useRef<T>( options );\n\n\t// Clear cache when options change\n\tuseEffect( () => {\n\t\t// Check if options actually changed (not just re-rendered with same data)\n\t\tif ( prevOptionsRef.current !== options ) {\n\t\t\t// Options changed, clear cache\n\t\t\tmentionsCacheRef.current = new WeakMap();\n\t\t\tkeysRef.current.clear();\n\t\t\tprevOptionsRef.current = options;\n\n\t\t\t// Re-run search if we have an active search\n\t\t\tif ( mentionString !== null ) {\n\t\t\t\t// Trigger search with new options\n\t\t\t\tlookupService.search(\n\t\t\t\t\toptions,\n\t\t\t\t\tmentionString,\n\t\t\t\t\t( newResults ) => {\n\t\t\t\t\t\tsetResults( newResults as OptionsArray );\n\t\t\t\t\t},\n\t\t\t\t\tby\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}, [ options, by, mentionString ] );\n\n\tuseEffect( () => {\n\t\tif ( mentionString === null ) {\n\t\t\tsetResults( [] );\n\t\t\treturn;\n\t\t}\n\n\t\tconst mentionsCache = mentionsCacheRef.current;\n\t\tconst keysMap = keysRef.current;\n\n\t\t// Get or create key object for this string\n\t\tlet keyObj = keysMap.get( mentionString );\n\t\tif ( ! keyObj ) {\n\t\t\tkeyObj = new StringKey( mentionString );\n\t\t\tkeysMap.set( mentionString, keyObj );\n\t\t}\n\n\t\tconst cachedResults = mentionsCache.get( keyObj );\n\t\tif ( cachedResults === null ) {\n\t\t\treturn;\n\t\t} else if ( cachedResults !== undefined ) {\n\t\t\tsetResults( cachedResults );\n\t\t\treturn;\n\t\t}\n\n\t\tmentionsCache.set( keyObj, null );\n\t\tlookupService.search(\n\t\t\toptions,\n\t\t\tmentionString,\n\t\t\t( newResults ) => {\n\t\t\t\t// Ensure the key object still exists\n\t\t\t\tconst currentKeyObj = keysMap.get( mentionString );\n\t\t\t\tif ( currentKeyObj ) {\n\t\t\t\t\tmentionsCache.set( currentKeyObj, newResults as OptionsArray );\n\t\t\t\t\tsetResults( newResults as OptionsArray );\n\t\t\t\t}\n\t\t\t},\n\t\t\tby\n\t\t);\n\n\t\t// Periodically clean up old keys\n\t\tif ( keysMap.size > 100 ) {\n\t\t\tconst keysToKeep = Array.from( keysMap.entries() ).slice( -50 );\n\t\t\tkeysRef.current = new Map( keysToKeep );\n\t\t}\n\t}, [ mentionString, options, by ] );\n\n\treturn results;\n}\n\nconst lookupService = {\n\tsearch<T = OptionsArray>(\n\t\toptions: T,\n\t\tstring: string,\n\t\tcallback: ( result: T ) => void,\n\t\tby: T extends Array<infer U>\n\t\t\t? U extends Record<string, unknown>\n\t\t\t\t? keyof U\n\t\t\t\t: string\n\t\t\t: string\n\t) {\n\t\tsetTimeout( () => {\n\t\t\tif ( ! Array.isArray( options ) ) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst results = options.filter(\n\t\t\t\t( mention: string | Record<string, unknown> ) => {\n\t\t\t\t\tif ( typeof mention === 'string' ) {\n\t\t\t\t\t\treturn mention\n\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t.includes( string.toLowerCase() );\n\t\t\t\t\t}\n\n\t\t\t\t\tconst strValue = mention?.[ by ]?.toString();\n\t\t\t\t\tif ( ! strValue ) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn strValue\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.includes( string.toLowerCase() );\n\t\t\t\t}\n\t\t\t);\n\t\t\tcallback( results as T );\n\t\t}, 500 );\n\t},\n};\n\nexport default useMentionLookupService;\n"],"names":["StringKey","value","useMentionLookupService","options","mentionString","by","results","setResults","useState","mentionsCacheRef","useRef","keysRef","prevOptionsRef","useEffect","lookupService","newResults","mentionsCache","keysMap","keyObj","cachedResults","currentKeyObj","keysToKeep","string","callback","mention","strValue"],"mappings":";AAIA,MAAMA,EAAU;AAAA,EACf;AAAA,EAEA,YAAaC,GAAgB;AAC5B,SAAK,QAAQA;AAAA,EAAA;AAEf;AASA,SAASC,EACRC,GACAC,GACAC,IAAa,QACE;AACf,QAAM,CAAEC,GAASC,CAAW,IAAIC,EAAwB,CAAA,CAAG,GAGrDC,IAAmBC,EAAqD,oBAAA,SAAU,GAGlFC,IAAUD,EAAoC,oBAAA,KAAM,GAGpDE,IAAiBF,EAAWP,CAAQ;AAG1C,SAAAU,EAAW,MAAM;AAEX,IAAAD,EAAe,YAAYT,MAEdM,EAAA,8BAAc,QAAQ,GACvCE,EAAQ,QAAQ,MAAM,GACtBC,EAAe,UAAUT,GAGpBC,MAAkB,QAERU,EAAA;AAAA,MACbX;AAAA,MACAC;AAAA,MACA,CAAEW,MAAgB;AACjB,QAAAR,EAAYQ,CAA2B;AAAA,MACxC;AAAA,MACAV;AAAA,IACD;AAAA,EAGA,GAAA,CAAEF,GAASE,GAAID,CAAc,CAAE,GAElCS,EAAW,MAAM;AAChB,QAAKT,MAAkB,MAAO;AAC7B,MAAAG,EAAY,CAAA,CAAG;AACf;AAAA,IAAA;AAGD,UAAMS,IAAgBP,EAAiB,SACjCQ,IAAUN,EAAQ;AAGpB,QAAAO,IAASD,EAAQ,IAAKb,CAAc;AACxC,IAAOc,MACGA,IAAA,IAAIlB,EAAWI,CAAc,GAC9Ba,EAAA,IAAKb,GAAec,CAAO;AAG9B,UAAAC,IAAgBH,EAAc,IAAKE,CAAO;AAChD,QAAKC,MAAkB,MAEvB;AAAA,UAAYA,MAAkB,QAAY;AACzC,QAAAZ,EAAYY,CAAc;AAC1B;AAAA,MAAA;AAmBI,UAhBSH,EAAA,IAAKE,GAAQ,IAAK,GAClBJ,EAAA;AAAA,QACbX;AAAA,QACAC;AAAA,QACA,CAAEW,MAAgB;AAEX,gBAAAK,IAAgBH,EAAQ,IAAKb,CAAc;AACjD,UAAKgB,MACUJ,EAAA,IAAKI,GAAeL,CAA2B,GAC7DR,EAAYQ,CAA2B;AAAA,QAEzC;AAAA,QACAV;AAAA,MACD,GAGKY,EAAQ,OAAO,KAAM;AACnB,cAAAI,IAAa,MAAM,KAAMJ,EAAQ,SAAU,EAAE,MAAO,GAAI;AACtD,QAAAN,EAAA,UAAU,IAAI,IAAKU,CAAW;AAAA,MAAA;AAAA;AAAA,EAErC,GAAA,CAAEjB,GAAeD,GAASE,CAAG,CAAE,GAE3BC;AACR;AAEA,MAAMQ,IAAgB;AAAA,EACrB,OACCX,GACAmB,GACAC,GACAlB,GAKC;AACD,eAAY,MAAM;AACjB,UAAK,CAAE,MAAM,QAASF,CAAQ;AAC7B,eAAO,CAAC;AAET,YAAMG,IAAUH,EAAQ;AAAA,QACvB,CAAEqB,MAA+C;AAC3C,cAAA,OAAOA,KAAY;AACvB,mBAAOA,EACL,YAAY,EACZ,SAAUF,EAAO,aAAc;AAGlC,gBAAMG,IAAWD,IAAWnB,CAAG,GAAG,SAAS;AAC3C,iBAAOoB,IAGAA,EACL,YAAY,EACZ,SAAUH,EAAO,aAAc,IAJzB;AAAA,QAIyB;AAAA,MAEnC;AACA,MAAAC,EAAUjB,CAAa;AAAA,OACrB,GAAI;AAAA,EAAA;AAET;"}