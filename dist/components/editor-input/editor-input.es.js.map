{"version":3,"file":"editor-input.es.js","sources":["../../../src/components/editor-input/editor-input.tsx"],"sourcesContent":["import { AutoFocusPlugin } from '@lexical/react/LexicalAutoFocusPlugin';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport { EditorRefPlugin } from '@lexical/react/LexicalEditorRefPlugin';\nimport { cn } from '@/utilities/functions';\nimport {\n\teditableContentAreaCommonClassNames,\n\teditorCommonClassNames,\n\teditorDisabledClassNames,\n\teditorInputClassNames,\n} from './editor-input-style';\nimport MentionPlugin, {\n\ttype TMenuComponent,\n\ttype TMenuItemComponent,\n} from './mention-plugin/mention-plugin';\nimport MentionNode from './mention-plugin/mention-node';\nimport editorTheme from './editor-theme';\nimport EditorPlaceholder from './editor-placeholder';\nimport { forwardRef, isValidElement } from 'react';\nimport OverrideEditorStyle from './override-editor-style-plugin';\nimport CharacterLimit from './character-limit-plugin';\nimport type { EditorState, LexicalEditor } from 'lexical';\n\nfunction onError( error: Error ) {\n\t// eslint-disable-next-line no-console\n\tconsole.error( error );\n}\n\nconst EMPTY_CONTENT = `{\n    \"root\": {\n        \"children\": [\n            {\n                \"children\": [],\n                \"direction\": null,\n                \"format\": \"\",\n                \"indent\": 0,\n                \"type\": \"paragraph\",\n                \"version\": 1,\n                \"textFormat\": 0,\n                \"textStyle\": \"\"\n            }\n        ],\n        \"direction\": null,\n        \"format\": \"\",\n        \"indent\": 0,\n        \"type\": \"root\",\n        \"version\": 1\n    }\n}`;\n\nexport type TOptionItem = Record<string, unknown> | string;\n\ninterface EditorInputProps<T = TOptionItem> {\n\t/** Default value for the editor input field. */\n\tdefaultValue?: string;\n\t/** Placeholder text for the editor input field. */\n\tplaceholder?: string;\n\t/** Callback function that is called when the value of the input changes. The function receives the updated value as an argument. */\n\tonChange?: ( editorState: EditorState, editor: LexicalEditor ) => void;\n\t/** Defines the sizes of the editor input. */\n\tsize?: keyof typeof editorInputClassNames;\n\t/** Defines if the editor input is focused automatically. */\n\tautoFocus?: boolean;\n\t/** Array of options to be displayed in the editor input. Each option should be an object  or string. */\n\toptions: T[];\n\t/** The key to be used to display the label of the option in the editor input and in the editor after selecting any mention/tag option. */\n\tby?: T extends Record<string, unknown> ? keyof T : string;\n\t/** The trigger to be used to show the mention options. */\n\ttrigger?: string;\n\t/** The component to be used for the mention menu. */\n\tmenuComponent?: TMenuComponent;\n\t/** The component to be used for the mention menu items. */\n\tmenuItemComponent?: TMenuItemComponent;\n\t/** Additional class names to be added to the editor input. */\n\tclassName?: string;\n\t/** Additional class names to be added to the editor input wrapper. */\n\twrapperClassName?: string;\n\t/** Defines if the editor input is disabled. */\n\tdisabled?: boolean;\n\t/** Defines if the editor input should add a space after selecting a mention/tag option. */\n\tautoSpaceAfterMention?: boolean;\n\t/**\n\t * Override the default styles of the editor input.\n\t * This prop allows you to apply custom styles using a React.CSSProperties object.\n\t * Note that the editor utilizes inline styles, so to effectively override existing styles,\n\t * you must provide the desired styles through this `style` prop.\n\t *\n\t */\n\tstyle?: React.CSSProperties;\n\t/** Defines the maximum character limit of the editor input. */\n\tmaxLength?: number;\n}\n\ntype Ref = React.Ref<LexicalEditor>;\n\nconst EditorInput = forwardRef<LexicalEditor, EditorInputProps>(\n\t(\n\t\t{\n\t\t\tdefaultValue = '',\n\t\t\tplaceholder = 'Press @ to view variable suggestions',\n\t\t\tonChange,\n\t\t\tsize = 'md',\n\t\t\tautoFocus = false,\n\t\t\toptions,\n\t\t\tby = 'name',\n\t\t\ttrigger = '@',\n\t\t\tmenuComponent,\n\t\t\tmenuItemComponent,\n\t\t\tclassName,\n\t\t\twrapperClassName,\n\t\t\tdisabled = false,\n\t\t\tautoSpaceAfterMention = false,\n\t\t\tstyle,\n\t\t\tmaxLength,\n\t\t}: EditorInputProps,\n\t\tref: Ref\n\t) => {\n\t\tconst initialConfig = {\n\t\t\tnamespace: 'Editor',\n\t\t\teditorTheme,\n\t\t\tonError,\n\t\t\tnodes: [ MentionNode ],\n\t\t\teditorState: defaultValue ? defaultValue : EMPTY_CONTENT,\n\t\t\teditable: disabled ? false : true,\n\t\t};\n\n\t\tconst handleOnChange = (\n\t\t\teditorState: EditorState,\n\t\t\teditor: LexicalEditor\n\t\t) => {\n\t\t\tif ( typeof onChange !== 'function' ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tonChange( editorState, editor );\n\t\t};\n\n\t\tlet menuComponentToUse;\n\t\tlet menuItemComponentToUse;\n\t\tif ( isValidElement( menuComponent ) ) {\n\t\t\tmenuComponentToUse = menuComponent;\n\t\t}\n\t\tif ( isValidElement( menuItemComponent ) ) {\n\t\t\tmenuItemComponentToUse = menuItemComponent;\n\t\t}\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={ cn(\n\t\t\t\t\t'relative w-full',\n\t\t\t\t\teditorCommonClassNames,\n\t\t\t\t\teditorInputClassNames[ size ],\n\t\t\t\t\tdisabled && editorDisabledClassNames,\n\t\t\t\t\twrapperClassName\n\t\t\t\t) }\n\t\t\t>\n\t\t\t\t<LexicalComposer initialConfig={ initialConfig }>\n\t\t\t\t\t<div className=\"relative w-full [&_p]:m-0\">\n\t\t\t\t\t\t<PlainTextPlugin\n\t\t\t\t\t\t\tcontentEditable={\n\t\t\t\t\t\t\t\t<ContentEditable\n\t\t\t\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\t\t\t\t'editor-content focus-visible:outline-none outline-none',\n\t\t\t\t\t\t\t\t\t\teditableContentAreaCommonClassNames,\n\t\t\t\t\t\t\t\t\t\tclassName\n\t\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\t\t<EditorPlaceholder content={ placeholder } />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tErrorBoundary={ LexicalErrorBoundary }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<HistoryPlugin />\n\t\t\t\t\t<MentionPlugin\n\t\t\t\t\t\tmenuComponent={ menuComponentToUse }\n\t\t\t\t\t\tmenuItemComponent={ menuItemComponentToUse }\n\t\t\t\t\t\tsize={ size }\n\t\t\t\t\t\tby={ by }\n\t\t\t\t\t\toptionsArray={ options }\n\t\t\t\t\t\ttrigger={ trigger }\n\t\t\t\t\t\tautoSpace={ autoSpaceAfterMention }\n\t\t\t\t\t/>\n\t\t\t\t\t<OnChangePlugin\n\t\t\t\t\t\tonChange={ handleOnChange }\n\t\t\t\t\t\tignoreSelectionChange\n\t\t\t\t\t/>\n\t\t\t\t\t{ ref && <EditorRefPlugin editorRef={ ref } /> }\n\t\t\t\t\t{ autoFocus && <AutoFocusPlugin /> }\n\t\t\t\t\t<OverrideEditorStyle style={ style } />\n\t\t\t\t\t{ maxLength && <CharacterLimit maxLength={ maxLength } /> }\n\t\t\t\t</LexicalComposer>\n\t\t\t</div>\n\t\t);\n\t}\n);\nEditorInput.displayName = 'EditorInput';\n\nexport default EditorInput;\n"],"names":["onError","error","EMPTY_CONTENT","EditorInput","forwardRef","defaultValue","placeholder","onChange","size","autoFocus","options","by","trigger","menuComponent","menuItemComponent","className","wrapperClassName","disabled","autoSpaceAfterMention","style","maxLength","ref","initialConfig","editorTheme","MentionNode","handleOnChange","editorState","editor","menuComponentToUse","menuItemComponentToUse","isValidElement","jsx","cn","editorCommonClassNames","editorInputClassNames","editorDisabledClassNames","jsxs","LexicalComposer","PlainTextPlugin","ContentEditable","editableContentAreaCommonClassNames","EditorPlaceholder","LexicalErrorBoundary","HistoryPlugin","MentionPlugin","OnChangePlugin","EditorRefPlugin","AutoFocusPlugin","OverrideEditorStyle","CharacterLimit"],"mappings":";;;;;;;;;;;;;;;;;;AA2BA,SAASA,EAASC,GAAe;AAEhC,UAAQ,MAAOA,CAAM;AACtB;AAEA,MAAMC,IAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAmEhBC,IAAcC;AAAA,EACnB,CACC;AAAA,IACC,cAAAC,IAAe;AAAA,IACf,aAAAC,IAAc;AAAA,IACd,UAAAC;AAAA,IACA,MAAAC,IAAO;AAAA,IACP,WAAAC,IAAY;AAAA,IACZ,SAAAC;AAAA,IACA,IAAAC,IAAK;AAAA,IACL,SAAAC,IAAU;AAAA,IACV,eAAAC;AAAA,IACA,mBAAAC;AAAA,IACA,WAAAC;AAAA,IACA,kBAAAC;AAAA,IACA,UAAAC,IAAW;AAAA,IACX,uBAAAC,IAAwB;AAAA,IACxB,OAAAC;AAAA,IACA,WAAAC;AAAA,KAEDC,MACI;AACJ,UAAMC,IAAgB;AAAA,MACrB,WAAW;AAAA,MACX,aAAAC;AAAA,MACA,SAAAvB;AAAA,MACA,OAAO,CAAEwB,CAAY;AAAA,MACrB,aAAanB,KAA8BH;AAAA,MAC3C,UAAU,CAAAe;AAAA,IACX,GAEMQ,IAAiB,CACtBC,GACAC,MACI;AACC,MAAA,OAAOpB,KAAa,cAGzBA,EAAUmB,GAAaC,CAAO;AAAA,IAC/B;AAEI,QAAAC,GACAC;AACC,WAAAC,EAAgBjB,CAAc,MACbe,IAAAf,IAEjBiB,EAAgBhB,CAAkB,MACbe,IAAAf,IAIzB,gBAAAiB;AAAA,MAAC;AAAA,MAAA;AAAA,QACA,WAAYC;AAAA,UACX;AAAA,UACAC;AAAA,UACAC,EAAuB1B,CAAK;AAAA,UAC5BS,KAAYkB;AAAA,UACZnB;AAAA,QACD;AAAA,QAEA,UAAA,gBAAAoB,EAACC,KAAgB,eAAAf,GAChB,UAAA;AAAA,UAAC,gBAAAS,EAAA,OAAA,EAAI,WAAU,6BACd,UAAA,gBAAAA;AAAA,YAACO;AAAA,YAAA;AAAA,cACA,iBACC,gBAAAP;AAAA,gBAACQ;AAAA,gBAAA;AAAA,kBACA,WAAYP;AAAA,oBACX;AAAA,oBACAQ;AAAA,oBACAzB;AAAA,kBAAA;AAAA,gBACD;AAAA,cACD;AAAA,cAED,aACC,gBAAAgB,EAACU,GAAkB,EAAA,SAAUnC,EAAc,CAAA;AAAA,cAE5C,eAAgBoC;AAAA,YAAA;AAAA,UAAA,GAElB;AAAA,4BACCC,GAAc,EAAA;AAAA,UACf,gBAAAZ;AAAA,YAACa;AAAA,YAAA;AAAA,cACA,eAAgBhB;AAAA,cAChB,mBAAoBC;AAAA,cACpB,MAAArB;AAAA,cACA,IAAAG;AAAA,cACA,cAAeD;AAAA,cACf,SAAAE;AAAA,cACA,WAAYM;AAAA,YAAA;AAAA,UACb;AAAA,UACA,gBAAAa;AAAA,YAACc;AAAA,YAAA;AAAA,cACA,UAAWpB;AAAA,cACX,uBAAqB;AAAA,YAAA;AAAA,UACtB;AAAA,UACEJ,KAAO,gBAAAU,EAACe,GAAgB,EAAA,WAAYzB,EAAM,CAAA;AAAA,UAC1CZ,uBAAcsC,GAAgB,EAAA;AAAA,UAChC,gBAAAhB,EAACiB,KAAoB,OAAA7B,GAAgB;AAAA,UACnCC,KAAc,gBAAAW,EAAAkB,GAAA,EAAe,WAAA7B,EAAwB,CAAA;AAAA,QAAA,EACxD,CAAA;AAAA,MAAA;AAAA,IACD;AAAA,EAAA;AAGH;AACAjB,EAAY,cAAc;"}