{"version":3,"file":"avatar.cjs.js","sources":["../../../src/components/avatar/avatar.tsx"],"sourcesContent":["import React, { forwardRef, useEffect, useState, type ReactNode } from 'react';\nimport { cn } from '@/utilities/functions';\nimport { User } from 'lucide-react';\n\nexport type AvatarProps = {\n\t/** Defines the style variant of the avatar. */\n\tvariant?: 'white' | 'gray' | 'primary' | 'primary-light' | 'dark';\n\t/** Defines the size of the avatar. */\n\tsize?: 'xxs' | 'xs' | 'sm' | 'md' | 'lg';\n\t/** Defines the border of the avatar. */\n\tborder?: 'none' | 'subtle' | 'ring';\n\t/** The URL of the Avatar image */\n\turl?: string;\n\t/** Defines the children of the avatar. */\n\tchildren?: ReactNode;\n\t/** Defines the extra classes */\n\tclassName?: string;\n\t/** The URL of the Avatar image. */\n\tsrc?: string;\n\t/** Alt text for the avatar image. */\n\talt?: string;\n} & Pick<React.HTMLAttributes<HTMLImageElement>, 'title'>;\n\ntype Ref = HTMLImageElement;\n\nconst Avatar = forwardRef<Ref, AvatarProps>(\n\t(\n\t\t{\n\t\t\tvariant = 'primary',\n\t\t\tsize = 'md',\n\t\t\tborder = 'subtle',\n\t\t\tsrc: url,\n\t\t\talt,\n\t\t\tchildren,\n\t\t\tclassName,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\tconst [ imageError, setImageError ] = useState<boolean>( false );\n\n\t\tconst effectiveBorder = url && border === 'none' ? 'subtle' : border;\n\t\tconst baseClassNames =\n\t\t\t'rounded-full overflow-hidden flex items-center justify-center';\n\n\t\tconst variantClassNames = {\n\t\t\twhite: 'text-text-primary bg-background-primary',\n\t\t\tgray: 'text-text-primary bg-background-secondary',\n\t\t\tprimary: 'text-text-on-color bg-background-brand',\n\t\t\t'primary-light': 'text-text-primary bg-brand-background-50',\n\t\t\tdark: 'text-text-on-color bg-button-secondary',\n\t\t}?.[ variant ];\n\n\t\tconst sizeClassNames = {\n\t\t\txxs: 'size-5 [&>svg]:size-3 text-xs',\n\t\t\txs: 'size-6 [&>svg]:size-4 text-sm',\n\t\t\tsm: 'size-8 [&>svg]:size-5 text-base',\n\t\t\tmd: 'size-10 [&>svg]:size-6 text-lg',\n\t\t\tlg: 'size-12 [&>svg]:size-12 text-lg',\n\t\t}?.[ size ];\n\n\t\tconst borderClassNames = {\n\t\t\tnone: '',\n\t\t\tsubtle: 'ring-1 ring-border-transparent-subtle',\n\t\t\tring: 'ring ring-border-subtle',\n\t\t}?.[ effectiveBorder ];\n\n\t\tconst contentClassNames = url ? 'object-cover object-center' : '';\n\n\t\tconst getChildren = () => {\n\t\t\t// When image url is provided and image is not loaded, show children.\n\t\t\tif ( url && imageError ) {\n\t\t\t\tif ( alt && typeof alt === 'string' ) {\n\t\t\t\t\treturn alt?.[ 0 ]?.toUpperCase();\n\t\t\t\t} else if ( children && typeof children === 'string' ) {\n\t\t\t\t\treturn children?.[ 0 ]?.toUpperCase();\n\t\t\t\t} else if ( ! children && ! alt ) {\n\t\t\t\t\treturn <User />;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// For text avatars.\n\t\t\tif ( ! children ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( typeof children === 'string' ) {\n\t\t\t\treturn children?.[ 0 ]?.toUpperCase();\n\t\t\t}\n\t\t\treturn children;\n\t\t};\n\n\t\tconst handleImageError = () => {\n\t\t\tsetImageError( true );\n\t\t};\n\n\t\t// Image or Text Avatar.\n\t\tconst textAvatar = ! url || imageError;\n\n\t\t// If image url is not provided, show children.\n\t\tconst Tag = textAvatar ? 'div' : 'img';\n\n\t\tuseEffect( () => {\n\t\t\tsetImageError( false );\n\t\t}, [ url ] );\n\n\t\treturn (\n\t\t\t<Tag\n\t\t\t\tref={ ref }\n\t\t\t\tclassName={ cn(\n\t\t\t\t\tbaseClassNames,\n\t\t\t\t\ttextAvatar && variantClassNames,\n\t\t\t\t\tsizeClassNames,\n\t\t\t\t\tborderClassNames,\n\t\t\t\t\tcontentClassNames,\n\t\t\t\t\tclassName\n\t\t\t\t) }\n\t\t\t\t{ ...( textAvatar\n\t\t\t\t\t? { children: getChildren() }\n\t\t\t\t\t: { src: url, alt, onError: handleImageError } ) }\n\t\t\t\t{ ...props }\n\t\t\t/>\n\t\t);\n\t}\n);\n\nexport default Avatar;\n"],"names":["Avatar","forwardRef","variant","size","border","url","alt","children","className","props","ref","imageError","setImageError","useState","effectiveBorder","baseClassNames","variantClassNames","sizeClassNames","borderClassNames","contentClassNames","getChildren","User","handleImageError","textAvatar","Tag","useEffect","jsx","cn"],"mappings":"4OAyBMA,EAASC,EAAA,WACd,CACC,CACC,QAAAC,EAAU,UACV,KAAAC,EAAO,KACP,OAAAC,EAAS,SACT,IAAKC,EACL,IAAAC,EACA,SAAAC,EACA,UAAAC,EACA,GAAGC,GAEJC,IACI,CACJ,KAAM,CAAEC,EAAYC,CAAc,EAAIC,EAAAA,SAAmB,EAAM,EAEzDC,EAAkBT,GAAOD,IAAW,OAAS,SAAWA,EACxDW,EACL,gEAEKC,EAAoB,CACzB,MAAO,0CACP,KAAM,4CACN,QAAS,yCACT,gBAAiB,2CACjB,KAAM,0CACFd,CAAQ,EAEPe,EAAiB,CACtB,IAAK,gCACL,GAAI,gCACJ,GAAI,kCACJ,GAAI,iCACJ,GAAI,mCACAd,CAAK,EAEJe,EAAmB,CACxB,KAAM,GACN,OAAQ,wCACR,KAAM,2BACFJ,CAAgB,EAEfK,EAAoBd,EAAM,6BAA+B,GAEzDe,EAAc,IAAM,CAEzB,GAAKf,GAAOM,EAAa,CACnB,GAAAL,GAAO,OAAOA,GAAQ,SACnB,OAAAA,IAAO,CAAE,GAAG,YAAY,EACpB,GAAAC,GAAY,OAAOA,GAAa,SACpC,OAAAA,IAAY,CAAE,GAAG,YAAY,EACzB,GAAA,CAAEA,GAAY,CAAED,EAC3B,aAAQe,EAAK,KAAA,EAAA,CACd,CAID,OAAOd,EAGF,OAAOA,GAAa,SACjBA,IAAY,CAAE,GAAG,YAAY,EAE9BA,EALC,IAMT,EAEMe,EAAmB,IAAM,CAC9BV,EAAe,EAAK,CACrB,EAGMW,EAAa,CAAElB,GAAOM,EAGtBa,EAAMD,EAAa,MAAQ,MAEjCE,OAAAA,EAAAA,UAAW,IAAM,CAChBb,EAAe,EAAM,CAAA,EACnB,CAAEP,CAAI,CAAE,EAGVqB,EAAA,IAACF,EAAA,CACA,IAAAd,EACA,UAAYiB,EAAA,GACXZ,EACAQ,GAAcP,EACdC,EACAC,EACAC,EACAX,CACD,EACE,GAAKe,EACJ,CAAE,SAAUH,GACZ,EAAA,CAAE,IAAKf,EAAK,IAAAC,EAAK,QAASgB,CAAiB,EAC5C,GAAGb,CAAA,CACN,CAAA,CAGH"}