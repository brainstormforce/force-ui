{"version":3,"file":"text.es.js","sources":["../../../src/components/text/text.tsx"],"sourcesContent":["import { cn } from '@/utilities/functions';\nimport {\n\tfontColorClassNames,\n\tfontSizeClassNames,\n\tfontWeightClassNames,\n\tletterSpacingClassNames,\n\tlineHeightClassNames,\n} from './styles';\nimport {\n\tforwardRef,\n\ttype ElementType,\n\ttype ReactNode,\n\ttype ComponentType,\n\ttype PropsWithoutRef,\n} from 'react';\n\n// Polymorphic component type utilities\nexport type PropsOf<\n\tC extends keyof JSX.IntrinsicElements | ComponentType<unknown>,\n> = JSX.LibraryManagedAttributes<C, React.ComponentPropsWithoutRef<C>>;\n\ntype AsProp<C extends ElementType> = {\n\t/**\n\t * The element to render the text as.\n\t *\n\t * @default 'p'\n\t */\n\tas?: C;\n};\n\nexport type ExtendableProps<\n\tExtendedProps = object,\n\tOverrideProps = object,\n> = OverrideProps & Omit<ExtendedProps, keyof OverrideProps>;\n\nexport type InheritableElementProps<\n\tC extends ElementType,\n\tProps = object,\n> = ExtendableProps<PropsOf<C>, Props>;\n\nexport type PolymorphicComponentProps<\n\tC extends ElementType,\n\tProps = object,\n> = InheritableElementProps<C, Props & AsProp<C>>;\n\nexport type PolymorphicRef<C extends ElementType> =\n\tReact.ComponentPropsWithRef<C>['ref'];\n\nexport type PolymorphicComponentPropsWithRef<\n\tC extends ElementType,\n\tProps = object,\n> = PolymorphicComponentProps<C, Props> & { ref?: PolymorphicRef<C> };\n\n// Base props for the Text component\nexport interface TextBaseProps {\n\t/**\n\t * The content of the text.\n\t */\n\tchildren: ReactNode;\n\t/**\n\t * The font weight of the text.\n\t */\n\tweight?: keyof typeof fontWeightClassNames;\n\t/**\n\t * The font size of the text.\n\t */\n\tsize?: keyof typeof fontSizeClassNames;\n\t/**\n\t * The line height of the text.\n\t */\n\tlineHeight?: keyof typeof lineHeightClassNames;\n\t/**\n\t * The letter spacing of the text.\n\t */\n\tletterSpacing?: keyof typeof letterSpacingClassNames;\n\t/**\n\t * The font color of the text.\n\t */\n\tcolor?: keyof typeof fontColorClassNames;\n\t/**\n\t * Additional class names to apply\n\t */\n\tclassName?: string;\n}\n\nexport type TextProps<C extends ElementType = 'p'> =\n\tPolymorphicComponentPropsWithRef<C, TextBaseProps>;\n\n// Type definition for Text component with proper forwarded ref\nexport type TextComponent = <C extends ElementType = 'p'>(\n\tprops: TextProps<C>\n) => JSX.Element;\n\n// Create component with properly typed forwardRef\nconst Text = forwardRef( function Text<C extends ElementType = 'p'>(\n\t{\n\t\tas,\n\t\tchildren,\n\t\tweight,\n\t\tsize,\n\t\tlineHeight,\n\t\tletterSpacing,\n\t\tcolor = 'primary',\n\t\tclassName,\n\t\t...rest\n\t}: PropsWithoutRef<TextProps<C>>,\n\tref: PolymorphicRef<C>\n) {\n\tconst Component = as || 'p';\n\n\treturn (\n\t\t<Component\n\t\t\tref={ ref }\n\t\t\tclassName={ cn(\n\t\t\t\t'm-0 p-0',\n\t\t\t\tweight ? fontWeightClassNames[ weight ] : '',\n\t\t\t\tsize ? fontSizeClassNames[ size ] : '',\n\t\t\t\tlineHeight ? lineHeightClassNames[ lineHeight ] : '',\n\t\t\t\tletterSpacing ? letterSpacingClassNames[ letterSpacing ] : '',\n\t\t\t\tcolor ? fontColorClassNames[ color ] : '',\n\t\t\t\tclassName\n\t\t\t) }\n\t\t\t{ ...rest }\n\t\t>\n\t\t\t{ children }\n\t\t</Component>\n\t);\n} ) as TextComponent;\n\nexport { Text };\n\nexport default Text;\n"],"names":["Text","forwardRef","as","children","weight","size","lineHeight","letterSpacing","color","className","rest","ref","jsx","cn","fontWeightClassNames","fontSizeClassNames","lineHeightClassNames","letterSpacingClassNames","fontColorClassNames"],"mappings":";;;;AA8FM,MAAAA,IAAOC,EAAY,SACxB;AAAA,EACC,IAAAC;AAAA,EACA,UAAAC;AAAA,EACA,QAAAC;AAAA,EACA,MAAAC;AAAA,EACA,YAAAC;AAAA,EACA,eAAAC;AAAA,EACA,OAAAC,IAAQ;AAAA,EACR,WAAAC;AAAA,EACA,GAAGC;AACJ,GACAC,GACC;AAIA,SAAA,gBAAAC;AAAA,IAHiBV,KAAM;AAAA,IAGtB;AAAA,MACA,KAAAS;AAAA,MACA,WAAYE;AAAA,QACX;AAAA,QACAT,IAASU,EAAsBV,CAAO,IAAI;AAAA,QAC1CC,IAAOU,EAAoBV,CAAK,IAAI;AAAA,QACpCC,IAAaU,EAAsBV,CAAW,IAAI;AAAA,QAClDC,IAAgBU,EAAyBV,CAAc,IAAI;AAAA,QAC3DC,IAAQU,EAAqBV,CAAM,IAAI;AAAA,QACvCC;AAAA,MACD;AAAA,MACE,GAAGC;AAAA,MAEH,UAAAP;AAAA,IAAA;AAAA,EACH;AAEF,CAAE;"}