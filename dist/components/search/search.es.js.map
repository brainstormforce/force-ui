{"version":3,"file":"search.es.js","sources":["../../../src/components/search/search.tsx"],"sourcesContent":["import React, {\n\tuseState,\n\ttype ReactNode,\n\tuseEffect,\n\tforwardRef,\n\tcreateContext,\n\tuseContext,\n\tChildren,\n\tcloneElement,\n\tuseMemo,\n} from 'react';\nimport { omit } from 'lodash'; // or define your own omit function\nimport { cn, getOperatingSystem } from '@/utilities/functions';\nimport { Search } from 'lucide-react';\nimport Loader from '../loader';\nimport Badge from '../badge';\nimport {\n\ttextSizeClassNames,\n\tvariantClassNames,\n\tdisabledClassNames,\n\tsizeClassNames,\n\ticonClasses,\n} from './styles';\nimport {\n\tautoUpdate,\n\tflip,\n\tFloatingPortal,\n\toffset,\n\tsize as floatingSize,\n\tuseDismiss,\n\tuseFloating,\n\tuseInteractions,\n\ttype UseFloatingReturn,\n\ttype UseInteractionsReturn,\n\tuseListNavigation,\n\tFloatingFocusManager,\n\tFloatingList,\n\tuseListItem,\n} from '@floating-ui/react';\n\nexport interface CommonSearchBoxProps {\n\t/** Additional class names for styling. */\n\tclassName?: string;\n}\n\n// Define the Size type\ntype Size = 'sm' | 'md' | 'lg';\n\n// Define a common interface for SearchBox props\nexport interface BaseSearchBoxProps {\n\t/** Additional class names for styling. */\n\tclassName?: string;\n\n\t/** Size of the SearchBox. */\n\tsize?: 'sm' | 'md' | 'lg';\n\n\t/** Style variant of the input. */\n\tvariant?: 'primary' | 'secondary' | 'ghost';\n\n\t/** Whether the dropdown is open. */\n\topen?: boolean;\n\n\t/**\n\t * Call back function to handle the open state of the dropdown.\n\t */\n\tsetOpen?: ( open: boolean ) => void;\n\n\t/**\n\t * Callback when dropdown state changes.\n\t *\n\t * @deprecated Use `setOpen` instead.\n\t */\n\tonOpenChange?: ( open: boolean ) => void;\n\n\t/** Whether to filter children based on the search term. Turn off when you want to filter children manually. */\n\tfilter?: boolean;\n\n\t/** Whether to show loading state. */\n\tloading?: boolean;\n\n\t/** Child components to be rendered. */\n\tchildren?: ReactNode;\n\n\t/**\n\t * Clear search term after selecting a result.\n\t *\n\t * @default true\n\t */\n\tclearAfterSelect?: boolean;\n\n\t/**\n\t * Close dropdown after selecting a result.\n\t *\n\t * @default true\n\t */\n\tcloseAfterSelect?: boolean;\n}\n\ntype SearchBoxPortalProps = {\n\t/** Child components to be rendered. */\n\tchildren: ReactNode;\n\n\t/** Unique identifier for the portal, which determines where the dropdown will be rendered in the DOM. */\n\tid?: string;\n\n\t/** The HTML element that serves as the root for the portal, defining the location in the DOM where the dropdown will be displayed. This can be null if no specific root is provided. */\n\troot?: HTMLElement | null;\n};\n\n// Define props for SearchBoxInput\nexport interface SearchBoxInputProps extends CommonSearchBoxProps {\n\t/** Type of the input (e.g., text, search). */\n\ttype?: string;\n\n\t/** Placeholder text for the input. */\n\tplaceholder?: string;\n\n\t/** Whether the input is disabled. */\n\tdisabled?: boolean;\n\n\t/** Callback for input changes. */\n\tonChange?: ( value: string ) => void;\n\n\t/** Child components to be rendered. */\n\tchildren?: ReactNode;\n}\n\n// Extend the type to allow assigning subcomponents to SearchBox\ntype SearchBoxComponent = React.ForwardRefExoticComponent<\n\tBaseSearchBoxProps & React.RefAttributes<HTMLDivElement>\n> & {\n\tInput: typeof SearchBoxInput;\n\tLoading: typeof SearchBoxLoading;\n\tSeparator: typeof SearchBoxSeparator;\n\tContent: typeof SearchBoxContent;\n\tList: typeof SearchBoxList;\n\tEmpty: typeof SearchBoxEmpty;\n\tGroup: typeof SearchBoxGroup;\n\tItem: typeof SearchBoxItem;\n\tPortal: typeof SearchBoxPortal;\n};\n\ntype TSearchContentValue = Partial<{\n\tsize: 'sm' | 'md' | 'lg';\n\tsearchTerm: string;\n\tisLoading: boolean;\n\tonOpenChange: ( open: boolean ) => void;\n\trefs: UseFloatingReturn['refs'];\n\tfloatingStyles: UseFloatingReturn['floatingStyles'];\n\tgetReferenceProps: UseInteractionsReturn['getReferenceProps'];\n\tgetFloatingProps: UseInteractionsReturn['getFloatingProps'];\n\tgetItemProps: (\n\t\tuserProps?: React.HTMLProps<HTMLElement>\n\t) => Record<string, unknown>;\n\tactiveIndex: number | null;\n\tsetActiveIndex: React.Dispatch<React.SetStateAction<number | null>>;\n\tlistRef: React.MutableRefObject<( HTMLElement | null )[]>;\n\tsetSearchTerm: React.Dispatch<React.SetStateAction<string | undefined>>;\n\topen: boolean;\n\tcontext: UseFloatingReturn['context'];\n\tsetIsLoading: ( loading: boolean ) => void;\n\tclearAfterSelect: boolean;\n\tcloseAfterSelect: boolean;\n\tvariant: BaseSearchBoxProps['variant'];\n\tfilter: boolean;\n}>;\n\n// Define a context for the SearchBox\nconst SearchContext = createContext<TSearchContentValue>( {} );\n\nconst useSearchContext = () => {\n\treturn useContext<TSearchContentValue>( SearchContext );\n};\n\nexport const SearchBox = forwardRef<HTMLDivElement, BaseSearchBoxProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\tsize = 'sm' as Size,\n\t\t\topen = false,\n\t\t\tsetOpen,\n\t\t\tonOpenChange: _onOpenChange,\n\t\t\tloading = false,\n\t\t\tclearAfterSelect = true,\n\t\t\tcloseAfterSelect = true,\n\t\t\tvariant = 'primary',\n\t\t\tfilter = true,\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\tconst [ searchTerm, setSearchTerm ] = useState<string | undefined>( '' );\n\t\tconst [ isLoading, setIsLoading ] = useState<boolean>( loading ?? false );\n\t\tconst [ activeIndex, setActiveIndex ] = useState<number | null>( null );\n\t\tconst listRef = React.useRef<( HTMLElement | null )[]>( [] );\n\n\t\t/**\n\t\t * Memoized function to handle the open state of the dropdown.\n\t\t */\n\t\tconst onOpenChange = useMemo( () => {\n\t\t\tif ( typeof setOpen === 'function' ) {\n\t\t\t\treturn setOpen;\n\t\t\t}\n\t\t\treturn _onOpenChange;\n\t\t}, [ setOpen, _onOpenChange ] );\n\n\t\tconst { refs, floatingStyles, context } = useFloating( {\n\t\t\topen,\n\t\t\tonOpenChange,\n\t\t\tplacement: 'bottom-start',\n\t\t\twhileElementsMounted: autoUpdate,\n\t\t\tmiddleware: [\n\t\t\t\toffset( 2 ),\n\t\t\t\tflip( { padding: 10 } ),\n\t\t\t\tfloatingSize( {\n\t\t\t\t\tapply( { rects, elements, availableHeight } ) {\n\t\t\t\t\t\telements.floating.style.maxHeight = `${ availableHeight }px`;\n\t\t\t\t\t\telements.floating.style.width = `${ rects.reference.width }px`;\n\t\t\t\t\t\telements.floating.style.fontFamily =\n\t\t\t\t\t\t\twindow.getComputedStyle(\n\t\t\t\t\t\t\t\telements.reference as Element\n\t\t\t\t\t\t\t).fontFamily; // Retain parent's font family\n\t\t\t\t\t},\n\t\t\t\t} ),\n\t\t\t],\n\t\t} );\n\n\t\tconst listNavigation = useListNavigation( context, {\n\t\t\tlistRef,\n\t\t\tactiveIndex,\n\t\t\tonNavigate: setActiveIndex,\n\t\t\tloop: true,\n\t\t\t// Prevent opening the dropdown with arrow keys\n\t\t\topenOnArrowKeyDown: false,\n\t\t} );\n\n\t\tconst dismiss = useDismiss( context );\n\n\t\tconst { getReferenceProps, getFloatingProps, getItemProps } =\n\t\t\tuseInteractions( [ dismiss, listNavigation ] );\n\n\t\tuseEffect( () => {\n\t\t\tconst operatingSystem = getOperatingSystem();\n\n\t\t\tconst handleKeyDown = ( event: KeyboardEvent ) => {\n\t\t\t\tconst isMac = operatingSystem === 'Mac OS';\n\t\t\t\tconst metaOrCtrlKey = isMac ? event.metaKey : event.ctrlKey;\n\n\t\t\t\t// Check if the Meta (command/windows) key and '/' are pressed together\n\t\t\t\tif ( event.key === '/' && metaOrCtrlKey ) {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tif ( refs.reference && refs.reference.current ) {\n\t\t\t\t\t\tconst inputElement =\n\t\t\t\t\t\t\trefs.reference.current instanceof HTMLElement\n\t\t\t\t\t\t\t\t? refs.reference.current.querySelector( 'input' )\n\t\t\t\t\t\t\t\t: null;\n\n\t\t\t\t\t\tif ( inputElement ) {\n\t\t\t\t\t\t\tinputElement.focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twindow.addEventListener( 'keydown', handleKeyDown );\n\n\t\t\treturn () => {\n\t\t\t\twindow.removeEventListener( 'keydown', handleKeyDown );\n\t\t\t};\n\t\t}, [ refs.reference ] );\n\n\t\t// Reset active index when closing dropdown\n\t\tuseEffect( () => {\n\t\t\tif ( ! open ) {\n\t\t\t\tsetActiveIndex( null );\n\t\t\t}\n\t\t}, [ open ] );\n\n\t\treturn (\n\t\t\t<SearchContext.Provider\n\t\t\t\tvalue={ {\n\t\t\t\t\tsize,\n\t\t\t\t\topen,\n\t\t\t\t\tonOpenChange,\n\t\t\t\t\trefs,\n\t\t\t\t\tfloatingStyles,\n\t\t\t\t\tcontext,\n\t\t\t\t\tgetReferenceProps,\n\t\t\t\t\tgetFloatingProps,\n\t\t\t\t\tgetItemProps,\n\t\t\t\t\tactiveIndex,\n\t\t\t\t\tsetActiveIndex,\n\t\t\t\t\tlistRef,\n\t\t\t\t\tsearchTerm,\n\t\t\t\t\tsetSearchTerm,\n\t\t\t\t\tisLoading,\n\t\t\t\t\tsetIsLoading,\n\t\t\t\t\tclearAfterSelect,\n\t\t\t\t\tcloseAfterSelect,\n\t\t\t\t\tvariant,\n\t\t\t\t\tfilter,\n\t\t\t\t} }\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t'searchbox-wrapper box-border relative w-full',\n\t\t\t\t\t\tclassName\n\t\t\t\t\t) }\n\t\t\t\t\t{ ...props }\n\t\t\t\t\tref={ ref }\n\t\t\t\t/>\n\t\t\t</SearchContext.Provider>\n\t\t);\n\t}\n) as SearchBoxComponent;\nSearchBox.displayName = 'SearchBox';\n\nexport const SearchBoxInput = forwardRef<HTMLInputElement, SearchBoxInputProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\ttype = 'text',\n\t\t\tplaceholder = 'Search...',\n\t\t\tdisabled = false,\n\t\t\tonChange = () => {},\n\t\t\t...props\n\t\t},\n\t\tref\n\t) => {\n\t\tconst {\n\t\t\tsize,\n\t\t\trefs,\n\t\t\tgetReferenceProps,\n\t\t\tsearchTerm,\n\t\t\tsetSearchTerm,\n\t\t\topen,\n\t\t\tsetActiveIndex,\n\t\t\tlistRef,\n\t\t\tonOpenChange,\n\t\t\tvariant,\n\t\t} = useSearchContext();\n\t\tconst badgeSize = size === 'lg' ? 'sm' : 'xs';\n\n\t\tconst handleChange = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n\t\t\tconst newValue = event.target.value;\n\t\t\tsetSearchTerm!( newValue );\n\t\t\tonChange( newValue );\n\n\t\t\tif ( typeof onOpenChange === 'function' ) {\n\t\t\t\tif ( newValue.trim() ) {\n\t\t\t\t\tonOpenChange( true ); // Open the dropdown\n\t\t\t\t} else {\n\t\t\t\t\tonOpenChange( false ); // Close the dropdown\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tconst handleFocus = () => {\n\t\t\tif ( disabled || typeof onOpenChange !== 'function' ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( searchTerm?.trim() ) {\n\t\t\t\tonOpenChange!( true ); // Open the dropdown on focus if input is not empty\n\t\t\t}\n\t\t};\n\n\t\tconst handleKeyDown = ( event: React.KeyboardEvent ) => {\n\t\t\tif ( disabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Do not open dropdown on arrow keys\n\t\t\tif ( event.key === 'ArrowDown' || event.key === 'ArrowUp' ) {\n\t\t\t\t// Only navigate if dropdown is already open\n\t\t\t\tif ( open ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tif ( event.key === 'ArrowDown' ) {\n\t\t\t\t\t\t// Navigate to first item if none selected, otherwise listNavigation will handle it\n\t\t\t\t\t\tsetActiveIndex!( ( prev ) => ( prev === null ? 0 : prev ) );\n\t\t\t\t\t} else if ( event.key === 'ArrowUp' ) {\n\t\t\t\t\t\t// Navigate to last item if none selected, otherwise listNavigation will handle it\n\t\t\t\t\t\tsetActiveIndex!( ( prev ) => {\n\t\t\t\t\t\t\t// Get the length of the list to select the last item\n\t\t\t\t\t\t\tconst listLength = listRef?.current?.length || 0;\n\t\t\t\t\t\t\treturn prev === null && listLength > 0\n\t\t\t\t\t\t\t\t? listLength - 1\n\t\t\t\t\t\t\t\t: prev;\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Do not open the dropdown\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( event.key === 'Escape' ) {\n\t\t\t\tonOpenChange!( false );\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tref={ refs!.setReference }\n\t\t\t\tclassName={ cn(\n\t\t\t\t\t'w-full group relative flex justify-center items-center gap-1.5 focus-within:z-10 transition-all ease-in-out duration-200',\n\t\t\t\t\tvariantClassNames[ variant! ],\n\t\t\t\t\tsizeClassNames.input[ size! ],\n\t\t\t\t\tdisabled\n\t\t\t\t\t\t? disabledClassNames[ variant! ]\n\t\t\t\t\t\t: 'focus-within:ring-2 focus-within:ring-focus focus-within:ring-offset-2 focus-within:border-focus-border focus-within:hover:border-focus-border',\n\t\t\t\t\tclassName\n\t\t\t\t) }\n\t\t\t\t{ ...getReferenceProps!() }\n\t\t\t>\n\t\t\t\t<span\n\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\ttextSizeClassNames[ size! ],\n\t\t\t\t\t\tdisabled ? 'text-icon-disabled' : iconClasses,\n\t\t\t\t\t\t'flex justify-center items-center'\n\t\t\t\t\t) }\n\t\t\t\t>\n\t\t\t\t\t<Search />\n\t\t\t\t</span>\n\t\t\t\t<input\n\t\t\t\t\ttype={ type }\n\t\t\t\t\tref={ ref }\n\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\ttextSizeClassNames[ size! ],\n\t\t\t\t\t\t'flex-grow font-medium bg-transparent border-none outline-none border-transparent focus:ring-0 p-0 min-h-fit',\n\t\t\t\t\t\tdisabled &&\n\t\t\t\t\t\t\t'text-field-placeholder focus-within:text-field-input group-hover:text-field-input placeholder:text-field-placeholder'\n\t\t\t\t\t) }\n\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\tvalue={ searchTerm }\n\t\t\t\t\tonChange={ handleChange }\n\t\t\t\t\tonFocus={ handleFocus }\n\t\t\t\t\tonKeyDown={ handleKeyDown }\n\t\t\t\t\tplaceholder={ placeholder }\n\t\t\t\t\t// Omit custom props that are not valid for input\n\t\t\t\t\t{ ...omit( props, [\n\t\t\t\t\t\t'size',\n\t\t\t\t\t\t'open',\n\t\t\t\t\t\t'onOpenChange',\n\t\t\t\t\t\t'loading',\n\t\t\t\t\t] ) }\n\t\t\t\t/>\n\t\t\t\t<Badge\n\t\t\t\t\tlabel={ getOperatingSystem() === 'Mac OS' ? '⌘/' : 'Ctrl /' }\n\t\t\t\t\tsize={ badgeSize }\n\t\t\t\t\ttype=\"rounded\"\n\t\t\t\t\tvariant=\"neutral\"\n\t\t\t\t\tclassName=\"bg-background-primary\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n);\nSearchBoxInput.displayName = 'SearchBox.Input';\n\n// Define props for SearchBoxContent\nexport interface SearchBoxContentProps {\n\t/** Additional class names for styling. */\n\tclassName?: string;\n\n\t/** Child components to be rendered inside the dropdown. */\n\tchildren: ReactNode;\n}\n\nexport const SearchBoxContent = ( {\n\tclassName,\n\tchildren,\n\t...props\n}: SearchBoxContentProps ) => {\n\tconst { size, open, refs, floatingStyles, getFloatingProps, context } =\n\t\tuseSearchContext();\n\n\tif ( ! open ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<FloatingFocusManager\n\t\t\tcontext={ context! }\n\t\t\tinitialFocus={ -1 }\n\t\t\treturnFocus={ true }\n\t\t>\n\t\t\t<div\n\t\t\t\tref={ refs!.setFloating }\n\t\t\t\tstyle={ {\n\t\t\t\t\t...floatingStyles,\n\t\t\t\t} }\n\t\t\t\tclassName={ cn(\n\t\t\t\t\t'bg-background-primary rounded-md border border-solid border-border-subtle shadow-soft-shadow-lg overflow-y-auto text-wrap focus:outline-none',\n\t\t\t\t\tsizeClassNames.dialog[ size! ],\n\t\t\t\t\tclassName\n\t\t\t\t) }\n\t\t\t\t{ ...getFloatingProps!() }\n\t\t\t\t{ ...props }\n\t\t\t>\n\t\t\t\t{ children }\n\t\t\t</div>\n\t\t</FloatingFocusManager>\n\t);\n};\nSearchBoxContent.displayName = 'SearchBox.Content';\n\nexport const SearchBoxPortal = ( {\n\tchildren,\n\tid,\n\troot,\n}: SearchBoxPortalProps ) => {\n\treturn (\n\t\t<FloatingPortal id={ id } root={ root }>\n\t\t\t{ children }\n\t\t</FloatingPortal>\n\t);\n};\nSearchBoxPortal.displayName = 'SearchBox.Portal';\n\n// Define props for SearchBoxList\nexport interface SearchBoxListProps extends CommonSearchBoxProps {\n\t/** Child components to be rendered. */\n\tchildren: ReactNode;\n}\n\nexport const SearchBoxList = ( {\n\tchildren,\n\tclassName,\n}: SearchBoxListProps ) => {\n\tconst { searchTerm, isLoading, listRef, filter = true } = useSearchContext();\n\n\tif ( ! filter ) {\n\t\treturn (\n\t\t\t<FloatingList elementsRef={ listRef! }>\n\t\t\t\t<div className={ className }>{ children }</div>\n\t\t\t</FloatingList>\n\t\t);\n\t}\n\tconst filteredChildren = Children.toArray( children )\n\t\t.map( ( child ) => {\n\t\t\tif ( React.isValidElement( child ) && child.type === SearchBoxGroup ) {\n\t\t\t\tconst filteredItems = Children.toArray(\n\t\t\t\t\tchild.props.children\n\t\t\t\t).filter(\n\t\t\t\t\t( item ) =>\n\t\t\t\t\t\tReact.isValidElement( item ) &&\n\t\t\t\t\t\ttypeof item.props.children === 'string' &&\n\t\t\t\t\t\titem.props.children\n\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t.includes( searchTerm!.toLowerCase() )\n\t\t\t\t);\n\t\t\t\treturn filteredItems.length > 0\n\t\t\t\t\t? cloneElement( child as React.ReactElement, {\n\t\t\t\t\t\tchildren: filteredItems,\n\t\t\t\t\t} )\n\t\t\t\t\t: null;\n\t\t\t}\n\t\t\treturn child;\n\t\t} )\n\t\t.filter( Boolean );\n\n\tif ( isLoading ) {\n\t\treturn <SearchBoxLoading />;\n\t}\n\treturn (\n\t\t<FloatingList elementsRef={ listRef! }>\n\t\t\t<div className={ className }>\n\t\t\t\t{ filteredChildren.some(\n\t\t\t\t\t( child ) =>\n\t\t\t\t\t\tReact.isValidElement( child ) &&\n\t\t\t\t\t\tchild.type !== SearchBoxSeparator\n\t\t\t\t) ? (\n\t\t\t\t\t\tfilteredChildren\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<SearchBoxEmpty />\n\t\t\t\t\t) }\n\t\t\t</div>\n\t\t</FloatingList>\n\t);\n};\nSearchBoxList.displayName = 'SearchBox.List';\n\n// Define props for SearchBoxEmpty\nexport interface SearchBoxEmptyProps {\n\t/** Content to display when there are no results. */\n\tchildren?: ReactNode;\n\n\t/** Additional class names for styling. */\n\tclassName?: string;\n}\n\nexport const SearchBoxEmpty = ( {\n\tchildren = 'No results found.',\n\tclassName,\n}: SearchBoxEmptyProps ) => {\n\tconst { size } = useSearchContext();\n\treturn (\n\t\t<div\n\t\t\tclassName={ cn(\n\t\t\t\t'flex justify-center items-center',\n\t\t\t\tsizeClassNames.item[ size! ],\n\t\t\t\t'text-text-tertiary p-4',\n\t\t\t\tclassName\n\t\t\t) }\n\t\t>\n\t\t\t{ children }\n\t\t</div>\n\t);\n};\nSearchBoxEmpty.displayName = 'SearchBox.Empty';\n\n// Define props for SearchBoxGroup\nexport interface SearchBoxGroupProps {\n\t/** Heading for the group. */\n\theading?: string;\n\n\t/** Child components to be rendered in the group. */\n\tchildren: ReactNode;\n}\n\nexport const SearchBoxGroup = ( { heading, children }: SearchBoxGroupProps ) => {\n\tconst { size } = useSearchContext();\n\treturn (\n\t\t<div\n\t\t\tclassName={ cn(\n\t\t\t\tsizeClassNames.content[ size as 'sm' | 'md' | 'lg' ],\n\t\t\t\tsizeClassNames.item[ size! ]\n\t\t\t) }\n\t\t>\n\t\t\t{ heading && (\n\t\t\t\t<div\n\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\tsizeClassNames.title[ size! ],\n\t\t\t\t\t\t'text-text-tertiary'\n\t\t\t\t\t) }\n\t\t\t\t>\n\t\t\t\t\t{ heading }\n\t\t\t\t</div>\n\t\t\t) }\n\t\t\t{ children }\n\t\t</div>\n\t);\n};\nSearchBoxGroup.displayName = 'SearchBox.Group';\n\n// Define props for SearchBoxItem\nexport interface SearchBoxItemProps {\n\t/** Additional class names for styling. */\n\tclassName?: string;\n\n\t/** Icon to display next to the item. */\n\ticon?: ReactNode;\n\n\t/** Child components to be rendered. */\n\tchildren: ReactNode;\n\n\t/** On click handler. */\n\tonClick?: () => void;\n}\n\nexport const SearchBoxItem = forwardRef<HTMLButtonElement, SearchBoxItemProps>(\n\t( { className, icon, children, onClick, ...props }, ref ) => {\n\t\tconst {\n\t\t\tsize,\n\t\t\tsetSearchTerm,\n\t\t\tclearAfterSelect,\n\t\t\tgetItemProps,\n\t\t\tactiveIndex,\n\t\t\tonOpenChange,\n\t\t\tcloseAfterSelect,\n\t\t} = useSearchContext();\n\t\tconst { ref: itemRef, index } = useListItem();\n\n\t\t// Combine the refs\n\t\tconst combinedRef = ( node: HTMLButtonElement | null ) => {\n\t\t\tif ( typeof ref === 'function' ) {\n\t\t\t\tref( node );\n\t\t\t} else if ( ref ) {\n\t\t\t\tref.current = node;\n\t\t\t}\n\t\t\titemRef( node );\n\t\t};\n\n\t\tconst isActive = activeIndex === index;\n\n\t\tconst handleClick = () => {\n\t\t\tif ( typeof onClick === 'function' ) {\n\t\t\t\tonClick();\n\t\t\t}\n\n\t\t\tif ( clearAfterSelect ) {\n\t\t\t\tsetSearchTerm!( '' );\n\t\t\t}\n\n\t\t\tif ( closeAfterSelect ) {\n\t\t\t\tonOpenChange!( false );\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<button\n\t\t\t\ttype=\"button\"\n\t\t\t\tref={ combinedRef }\n\t\t\t\tclassName={ cn(\n\t\t\t\t\t'flex w-full items-center justify-start gap-1 p-1 cursor-pointer border-none bg-transparent text-left focus:outline-none',\n\t\t\t\t\tisActive && 'bg-background-secondary',\n\t\t\t\t\t! isActive &&\n\t\t\t\t\t\t'hover:bg-background-secondary focus:bg-background-secondary',\n\t\t\t\t\tsizeClassNames.item[ size! ],\n\t\t\t\t\tclassName\n\t\t\t\t) }\n\t\t\t\t{ ...getItemProps?.( {\n\t\t\t\t\trole: 'option',\n\t\t\t\t\t'aria-selected': isActive,\n\t\t\t\t\tonClick: handleClick,\n\t\t\t\t\t...props,\n\t\t\t\t} ) }\n\t\t\t>\n\t\t\t\t{ icon && (\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\tsizeClassNames.icon[ size! ],\n\t\t\t\t\t\t\t'flex items-center justify-center'\n\t\t\t\t\t\t) }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ icon }\n\t\t\t\t\t</span>\n\t\t\t\t) }\n\t\t\t\t<span\n\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t'flex-grow py-0.5 px-1 font-normal',\n\t\t\t\t\t\tsizeClassNames.item[ size! ],\n\t\t\t\t\t) }\n\t\t\t\t>\n\t\t\t\t\t{ children }\n\t\t\t\t</span>\n\t\t\t</button>\n\t\t);\n\t}\n);\nSearchBoxItem.displayName = 'SearchBox.Item';\n\n// Define props for SearchBoxLoading\nexport interface SearchBoxLoadingProps {\n\t/** Loading icon to display while loading. */\n\tloadingIcon?: ReactNode & { size?: string };\n}\n\nexport const SearchBoxLoading = ( {\n\tloadingIcon = <Loader />,\n}: SearchBoxLoadingProps ) => {\n\tconst { size } = useSearchContext();\n\n\t// Clone the loadingIcon element to pass the size prop\n\tconst loadingIconWithSize = React.isValidElement( loadingIcon )\n\t\t? cloneElement( loadingIcon, { size } )\n\t\t: loadingIcon;\n\treturn (\n\t\t<div\n\t\t\tclassName={ cn(\n\t\t\t\t'flex justify-center p-4',\n\t\t\t\ttextSizeClassNames[ size! ],\n\t\t\t\tsizeClassNames.item[ size! ]\n\t\t\t) }\n\t\t>\n\t\t\t{ loadingIconWithSize }\n\t\t</div>\n\t);\n};\nSearchBoxLoading.displayName = 'SearchBox.Loading';\n\n// Define props for SearchBoxSeparator\nexport interface SearchBoxSeparatorProps {\n\t/** Additional class names for styling. */\n\tclassName?: string;\n}\n\nexport const SearchBoxSeparator = forwardRef<\n\tHTMLHRElement,\n\tSearchBoxSeparatorProps\n>( ( { className, ...props }, ref ) => (\n\t<hr\n\t\tref={ ref }\n\t\tclassName={ cn(\n\t\t\t'border-0 border-t border-border-subtle border-solid m-0',\n\t\t\tclassName\n\t\t) }\n\t\t{ ...props }\n\t/>\n) );\nSearchBoxSeparator.displayName = 'SearchBox.Separator';\n\nSearchBox.Input = SearchBoxInput;\nSearchBox.Loading = SearchBoxLoading;\nSearchBox.Separator = SearchBoxSeparator;\nSearchBox.Content = SearchBoxContent;\nSearchBox.List = SearchBoxList;\nSearchBox.Empty = SearchBoxEmpty;\nSearchBox.Group = SearchBoxGroup;\nSearchBox.Item = SearchBoxItem;\nSearchBox.Portal = SearchBoxPortal;\nexport default SearchBox;\n"],"names":["SearchContext","createContext","useSearchContext","useContext","SearchBox","forwardRef","className","size","open","setOpen","_onOpenChange","loading","clearAfterSelect","closeAfterSelect","variant","filter","props","ref","searchTerm","setSearchTerm","useState","isLoading","setIsLoading","activeIndex","setActiveIndex","listRef","React","onOpenChange","useMemo","refs","floatingStyles","context","useFloating","autoUpdate","offset","flip","floatingSize","rects","elements","availableHeight","listNavigation","useListNavigation","dismiss","useDismiss","getReferenceProps","getFloatingProps","getItemProps","useInteractions","useEffect","operatingSystem","getOperatingSystem","handleKeyDown","event","metaOrCtrlKey","inputElement","jsx","cn","SearchBoxInput","type","placeholder","disabled","onChange","badgeSize","handleChange","newValue","handleFocus","prev","listLength","jsxs","variantClassNames","sizeClassNames","disabledClassNames","textSizeClassNames","iconClasses","Search","omit","Badge","SearchBoxContent","children","FloatingFocusManager","SearchBoxPortal","id","root","FloatingPortal","SearchBoxList","FloatingList","filteredChildren","Children","child","SearchBoxGroup","filteredItems","item","cloneElement","SearchBoxLoading","SearchBoxSeparator","SearchBoxEmpty","heading","SearchBoxItem","icon","onClick","itemRef","index","useListItem","combinedRef","node","isActive","handleClick","loadingIcon","Loader","loadingIconWithSize"],"mappings":"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"}