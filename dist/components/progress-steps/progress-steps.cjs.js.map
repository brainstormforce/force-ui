{"version":3,"file":"progress-steps.cjs.js","sources":["../../../src/components/progress-steps/progress-steps.tsx"],"sourcesContent":["import React, { type ReactNode } from 'react';\nimport { cn } from '@/utilities/functions';\nimport { Plus, Check } from 'lucide-react';\nimport {\n\tgetVariantClasses,\n\tcompletedStepCommonClasses,\n\tstepWrapperClasses,\n} from './utils';\n\nconst sizeClassnames = {\n\tsm: {\n\t\tdot: 'size-2.5',\n\t\tring: 'size-5',\n\t\tnumberIcon: 'size-5 text-tiny',\n\t\ticon: 'size-5',\n\t\tlabel: 'text-xs',\n\t},\n\tmd: {\n\t\tdot: 'size-3',\n\t\tring: 'size-6',\n\t\tnumberIcon: 'size-6 text-sm',\n\t\ticon: 'size-6',\n\t\tlabel: 'text-sm',\n\t},\n\tlg: {\n\t\tdot: 'size-3.5',\n\t\tring: 'size-7',\n\t\tnumberIcon: 'size-7 text-md',\n\t\ticon: 'size-7',\n\t\tlabel: 'text-sm',\n\t},\n};\n\ntype StepSizeClasses = typeof sizeClassnames;\n\n// Common props interface\nexport interface ProgressCommonProps {\n\t/** Defines the children of the progress steps. */\n\tchildren: ReactNode;\n\t/** Defines the class name for the component. */\n\tclassName?: string;\n}\n\n// Progress Steps props interface\nexport interface ProgressStepsProps extends ProgressCommonProps {\n\t/** Defines the variant of the progress step. */\n\tvariant?: 'dot' | 'number' | 'icon';\n\t/** Defines the size of the progress step. */\n\tsize?: 'sm' | 'md' | 'lg';\n\t/** Defines the type of layout. */\n\ttype?: 'inline' | 'stack';\n\t/** Defines the current step number. `-1` keeps all steps completed. */\n\tcurrentStep?: number;\n\t/** Additional props for the connecting line. */\n\tlineClassName?: string;\n}\n\n// Progress Step props interface\nexport interface ProgressStepProps extends ProgressCommonProps {\n\t/** Text label for the step. */\n\tlabelText?: string;\n\n\t/** Custom icon for the step. */\n\ticon?: ReactNode;\n\n\t/** Indicates if this step is currently active. */\n\tisCurrent?: boolean;\n\n\t/** Indicates if this step has been completed. */\n\tisCompleted?: boolean;\n\n\t/** Defines the layout type: 'inline' or 'stack'. */\n\ttype?: 'inline' | 'stack';\n\n\t/** Specifies the variant style: 'dot', 'number', or 'icon'. */\n\tvariant?: 'dot' | 'number' | 'icon';\n\n\t/** Size-specific CSS classes for the step. */\n\tsizeClasses?: StepSizeClasses;\n\n\t/** Defines the size of the step: 'sm', 'md', or 'lg'. */\n\tsize: 'sm' | 'md' | 'lg';\n\n\t/** Indicates if this step is the last in the sequence. */\n\tisLast?: boolean;\n\n\t/** The index of the step in the sequence. */\n\tindex?: number;\n\n\t/** Additional class names for the connecting line. */\n\tlineClassName?: string;\n}\n\nexport const ProgressSteps = ( {\n\tvariant = 'dot',\n\tsize = 'sm',\n\ttype = 'inline',\n\tcurrentStep = 1,\n\tchildren,\n\tclassName,\n\tlineClassName = 'min-w-10',\n\t...rest\n}: ProgressStepsProps ) => {\n\tconst totalSteps = React.Children.count( children );\n\tif ( currentStep === -1 ) {\n\t\tcurrentStep = totalSteps + 1;\n\t}\n\tconst steps = React.Children.map( children, ( child, index ) => {\n\t\tconst isCompleted = index + 1 < currentStep;\n\t\tconst isCurrent = index + 1 === currentStep;\n\t\tconst isLast = index + 1 === totalSteps;\n\n\t\tconst stepProps = {\n\t\t\tisCompleted,\n\t\t\tisCurrent,\n\t\t\tsizeClasses: sizeClassnames,\n\t\t\tsize,\n\t\t\tvariant,\n\t\t\ttype,\n\t\t\tisLast,\n\t\t\tindex,\n\t\t\tlineClassName,\n\t\t};\n\n\t\treturn (\n\t\t\t<React.Fragment key={ index }>\n\t\t\t\t{ React.isValidElement( child )\n\t\t\t\t\t? React.cloneElement( child, stepProps )\n\t\t\t\t\t: child }\n\t\t\t</React.Fragment>\n\t\t);\n\t} );\n\n\treturn (\n\t\t<div\n\t\t\tclassName={ cn(\n\t\t\t\t'flex w-full',\n\t\t\t\tclassName,\n\t\t\t\ttype === 'inline' ? 'items-center justify-between' : ''\n\t\t\t) }\n\t\t\t{ ...rest }\n\t\t>\n\t\t\t{ steps }\n\t\t</div>\n\t);\n};\n\n// ProgressStep component as {ProgressSteps.Step}\nexport const ProgressStep = ( {\n\tlabelText = '',\n\ticon = <Plus />,\n\tisCurrent,\n\tisCompleted,\n\tclassName,\n\ttype,\n\tvariant,\n\tsizeClasses,\n\tsize,\n\tisLast,\n\tindex,\n\tlineClassName,\n\t...rest\n}: ProgressStepProps ) => {\n\tconst stepContent = createStepContent(\n\t\tvariant,\n\t\tisCompleted,\n\t\tisCurrent,\n\t\tsizeClasses!,\n\t\tsize,\n\t\ticon,\n\t\tindex as number\n\t);\n\n\tconst stackSizeOffset = {\n\t\tlg: 'left-[calc(50%+14px)] right-[calc(-50%+14px)]',\n\t\tmd: 'left-[calc(50%+12px)] right-[calc(-50%+12px)]',\n\t\tsm: 'left-[calc(50%+10px)] right-[calc(-50%+10px)]',\n\t};\n\n\tconst topClass = {\n\t\tlg: 'top-3.5',\n\t\tmd: 'top-3',\n\t\tsm: 'top-2.5',\n\t};\n\n\tconst renderLabel = () => {\n\t\tif ( labelText ) {\n\t\t\tconst labelClasses = cn(\n\t\t\t\tsizeClasses![ size ].label,\n\t\t\t\t'text-text-tertiary',\n\t\t\t\tisCurrent ? 'text-brand-primary-600' : '',\n\t\t\t\t'break-word', // max width for inline and stack\n\t\t\t\ttype === 'stack' ? 'mt-2 transform max-w-xs' : 'mx-2 max-w-32'\n\t\t\t);\n\t\t\treturn <span className={ labelClasses }>{ labelText }</span>;\n\t\t}\n\t\treturn null;\n\t};\n\n\tconst renderConnectingLine = () => {\n\t\tif ( ! isLast ) {\n\t\t\tconst lineClasses = cn(\n\t\t\t\t'block',\n\t\t\t\tisCompleted\n\t\t\t\t\t? 'border-brand-primary-600'\n\t\t\t\t\t: 'border-border-subtle',\n\t\t\t\tlineClassName\n\t\t\t);\n\n\t\t\tif ( type === 'stack' ) {\n\t\t\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\t'relative',\n\t\t\t\t\t\t\t'flex',\n\t\t\t\t\t\t\t'border-solid',\n\t\t\t\t\t\t\t'border-y',\n\t\t\t\t\t\t\t'absolute',\n\t\t\t\t\t\t\tisCompleted\n\t\t\t\t\t\t\t\t? 'border-brand-primary-600'\n\t\t\t\t\t\t\t\t: 'border-border-subtle',\n\t\t\t\t\t\t\ttopClass[ size ],\n\t\t\t\t\t\t\tstackSizeOffset[ size ]\n\t\t\t\t\t\t) }\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className=\"block\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\t'mr-2 border-y border-solid',\n\t\t\t\t\t\t\t! labelText && 'ml-2',\n\t\t\t\t\t\t\tlineClasses\n\t\t\t\t\t\t) }\n\t\t\t\t\t></span>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t};\n\n\t// Main return logic based on type\n\tif ( type === 'stack' ) {\n\t\treturn (\n\t\t\t<div className=\"relative flex-1 justify-center\">\n\t\t\t\t<div\n\t\t\t\t\tclassName={ cn( 'flex items-center flex-col', className ) }\n\t\t\t\t\t{ ...rest }\n\t\t\t\t>\n\t\t\t\t\t{ stepContent }\n\t\t\t\t\t{ renderLabel() }\n\t\t\t\t</div>\n\t\t\t\t{ renderConnectingLine() }\n\t\t\t</div>\n\t\t);\n\t}\n\treturn (\n\t\t<>\n\t\t\t<div className={ cn( 'flex items-center', className ) } { ...rest }>\n\t\t\t\t{ stepContent }\n\t\t\t\t{ renderLabel() }\n\t\t\t</div>\n\t\t\t{ renderConnectingLine() }\n\t\t</>\n\t);\n};\nProgressStep.displayName = 'ProgressSteps.Step';\n\n// Create step content\nexport const createStepContent = (\n\tvariant: 'dot' | 'number' | 'icon' | undefined,\n\tisCompleted: boolean | undefined,\n\tisCurrent: boolean | undefined,\n\tsizeClasses: StepSizeClasses,\n\tsize: 'sm' | 'md' | 'lg',\n\ticon: ReactNode,\n\tindex: number\n) => {\n\tif ( isCompleted ) {\n\t\treturn (\n\t\t\t<Check className={ completedStepCommonClasses( sizeClasses, size ) } />\n\t\t);\n\t}\n\n\tconst commonClasses = stepWrapperClasses( !! isCurrent, sizeClasses, size );\n\tconst variantClasses = getVariantClasses(\n\t\tvariant as 'dot' | 'number' | 'icon',\n\t\tisCurrent as boolean,\n\t\tsizeClasses,\n\t\tsize\n\t);\n\n\tlet content = null;\n\tif ( variant === 'number' ) {\n\t\tcontent = index + 1;\n\t} else if ( variant === 'icon' && icon ) {\n\t\tcontent = icon;\n\t}\n\n\treturn (\n\t\t<span className={ commonClasses }>\n\t\t\t<span className={ variantClasses }>{ content }</span>\n\t\t</span>\n\t);\n};\n\nProgressSteps.Step = ProgressStep;\n\nexport default ProgressSteps;\n"],"names":["sizeClassnames","ProgressSteps","variant","size","type","currentStep","children","className","lineClassName","rest","totalSteps","React","steps","child","index","isCompleted","isCurrent","isLast","stepProps","jsx","cn","ProgressStep","labelText","icon","Plus","sizeClasses","stepContent","createStepContent","stackSizeOffset","topClass","renderLabel","labelClasses","renderConnectingLine","lineClasses","jsxs","Fragment","Check","completedStepCommonClasses","commonClasses","stepWrapperClasses","variantClasses","getVariantClasses","content"],"mappings":"wQASMA,EAAiB,CACtB,GAAI,CACH,IAAK,WACL,KAAM,SACN,WAAY,mBACZ,KAAM,SACN,MAAO,SACR,EACA,GAAI,CACH,IAAK,SACL,KAAM,SACN,WAAY,iBACZ,KAAM,SACN,MAAO,SACR,EACA,GAAI,CACH,IAAK,WACL,KAAM,SACN,WAAY,iBACZ,KAAM,SACN,MAAO,SAAA,CAET,EA8DaC,EAAgB,CAAE,CAC9B,QAAAC,EAAU,MACV,KAAAC,EAAO,KACP,KAAAC,EAAO,SACP,YAAAC,EAAc,EACd,SAAAC,EACA,UAAAC,EACA,cAAAC,EAAgB,WAChB,GAAGC,CACJ,IAA2B,CAC1B,MAAMC,EAAaC,EAAM,SAAS,MAAOL,CAAS,EAC7CD,IAAgB,KACpBA,EAAcK,EAAa,GAE5B,MAAME,EAAQD,EAAM,SAAS,IAAKL,EAAU,CAAEO,EAAOC,IAAW,CACzD,MAAAC,EAAcD,EAAQ,EAAIT,EAC1BW,EAAYF,EAAQ,IAAMT,EAC1BY,EAASH,EAAQ,IAAMJ,EAEvBQ,EAAY,CACjB,YAAAH,EACA,UAAAC,EACA,YAAahB,EACb,KAAAG,EACA,QAAAD,EACA,KAAAE,EACA,OAAAa,EACA,MAAAH,EACA,cAAAN,CACD,EAEA,OACEW,EAAAA,IAAAR,EAAM,SAAN,CACE,WAAM,eAAgBE,CAAM,EAC3BF,EAAM,aAAcE,EAAOK,CAAU,EACrCL,GAHkBC,CAItB,CAAA,CAEA,EAGD,OAAAK,EAAA,IAAC,MAAA,CACA,UAAYC,EAAA,GACX,cACAb,EACAH,IAAS,SAAW,+BAAiC,EACtD,EACE,GAAGK,EAEH,SAAAG,CAAA,CACH,CAEF,EAGaS,EAAe,CAAE,CAC7B,UAAAC,EAAY,GACZ,KAAAC,QAAQC,EAAK,KAAA,EAAA,EACb,UAAAR,EACA,YAAAD,EACA,UAAAR,EACA,KAAAH,EACA,QAAAF,EACA,YAAAuB,EACA,KAAAtB,EACA,OAAAc,EACA,MAAAH,EACA,cAAAN,EACA,GAAGC,CACJ,IAA0B,CACzB,MAAMiB,EAAcC,EACnBzB,EACAa,EACAC,EACAS,EACAtB,EACAoB,EACAT,CACD,EAEMc,EAAkB,CACvB,GAAI,gDACJ,GAAI,gDACJ,GAAI,+CACL,EAEMC,EAAW,CAChB,GAAI,UACJ,GAAI,QACJ,GAAI,SACL,EAEMC,EAAc,IAAM,CACzB,GAAKR,EAAY,CAChB,MAAMS,EAAeX,EAAA,GACpBK,EAActB,CAAK,EAAE,MACrB,qBACAa,EAAY,yBAA2B,GACvC,aACAZ,IAAS,QAAU,0BAA4B,eAChD,EACA,OAAQe,EAAAA,IAAA,OAAA,CAAK,UAAYY,EAAiB,SAAWT,EAAA,CAAA,CAE/C,OAAA,IACR,EAEMU,EAAuB,IAAM,CAClC,GAAK,CAAEf,EAAS,CACf,MAAMgB,EAAcb,EAAA,GACnB,QACAL,EACG,2BACA,uBACHP,CACD,EAEA,OAAKJ,IAAS,QAEZe,EAAA,IAAC,MAAA,CACA,UAAYC,EAAA,GACX,WACA,OACA,eACA,WACA,WACAL,EACG,2BACA,uBACHc,EAAU1B,CAAK,EACfyB,EAAiBzB,CAAK,CACvB,EAEA,SAAAgB,EAAAA,IAAC,OAAK,CAAA,UAAU,OAAQ,CAAA,CAAA,CACzB,EAIDA,EAAAA,IAAC,MAAI,CAAA,UAAU,SACd,SAAAA,EAAA,IAAC,OAAA,CACA,UAAYC,EAAA,GACX,6BACA,CAAEE,GAAa,OACfW,CAAA,CACD,CAAA,EAEF,CAAA,CAGK,OAAA,IACR,EAGA,OAAK7B,IAAS,QAEZ8B,EAAA,KAAC,MAAI,CAAA,UAAU,iCACd,SAAA,CAAAA,EAAA,KAAC,MAAA,CACA,UAAYd,EAAAA,GAAI,6BAA8Bb,CAAU,EACtD,GAAGE,EAEH,SAAA,CAAAiB,EACAI,EAAY,CAAA,CAAA,CACf,EACEE,EAAqB,CAAA,EACxB,EAKAE,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAD,OAAC,OAAI,UAAYd,EAAA,GAAI,oBAAqBb,CAAU,EAAM,GAAGE,EAC1D,SAAA,CAAAiB,EACAI,EAAY,CAAA,EACf,EACEE,EAAqB,CAAA,EACxB,CAEF,EACAX,EAAa,YAAc,qBAGd,MAAAM,EAAoB,CAChCzB,EACAa,EACAC,EACAS,EACAtB,EACAoB,EACAT,IACI,CACJ,GAAKC,EACJ,aACEqB,EAAAA,MAAM,CAAA,UAAYC,EAAAA,2BAA4BZ,EAAatB,CAAK,EAAI,EAIvE,MAAMmC,EAAgBC,EAAAA,mBAAoB,CAAC,CAAEvB,EAAWS,EAAatB,CAAK,EACpEqC,EAAiBC,EAAA,kBACtBvC,EACAc,EACAS,EACAtB,CACD,EAEA,IAAIuC,EAAU,KACd,OAAKxC,IAAY,SAChBwC,EAAU5B,EAAQ,EACPZ,IAAY,QAAUqB,IACvBmB,EAAAnB,GAIVJ,EAAA,IAAC,QAAK,UAAYmB,EACjB,eAAC,OAAK,CAAA,UAAYE,EAAmB,SAAAE,CAAA,CAAS,CAC/C,CAAA,CAEF,EAEAzC,EAAc,KAAOoB"}