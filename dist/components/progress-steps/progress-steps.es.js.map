{"version":3,"file":"progress-steps.es.js","sources":["../../../src/components/progress-steps/progress-steps.tsx"],"sourcesContent":["import React, { type ReactNode } from 'react';\nimport { cn } from '@/utilities/functions';\nimport { Plus, Check } from 'lucide-react';\nimport {\n\tgetVariantClasses,\n\tcompletedStepCommonClasses,\n\tstepWrapperClasses,\n} from './utils';\n\nconst sizeClassnames = {\n\tsm: {\n\t\tdot: 'size-2.5',\n\t\tring: 'size-5',\n\t\tnumberIcon: 'size-5 text-tiny',\n\t\ticon: 'size-5',\n\t\tlabel: 'text-xs',\n\t},\n\tmd: {\n\t\tdot: 'size-3',\n\t\tring: 'size-6',\n\t\tnumberIcon: 'size-6 text-sm',\n\t\ticon: 'size-6',\n\t\tlabel: 'text-sm',\n\t},\n\tlg: {\n\t\tdot: 'size-3.5',\n\t\tring: 'size-7',\n\t\tnumberIcon: 'size-7 text-md',\n\t\ticon: 'size-7',\n\t\tlabel: 'text-sm',\n\t},\n};\n\ntype StepSizeClasses = typeof sizeClassnames;\n\n// Enhanced to include completed step variants\nexport type CompletedVariant = 'icon' | 'number';\n\n// Common props interface\nexport interface ProgressCommonProps {\n\t/** Defines the children of the progress steps. */\n\tchildren: ReactNode;\n\t/** Defines the class name for the component. */\n\tclassName?: string;\n}\n\n// Progress Steps props interface\nexport interface ProgressStepsProps extends ProgressCommonProps {\n\t/** Defines the variant of the progress step. */\n\tvariant?: 'dot' | 'number' | 'icon';\n\t/** Defines the size of the progress step. */\n\tsize?: 'sm' | 'md' | 'lg';\n\t/** Defines the type of layout. */\n\ttype?: 'inline' | 'stack';\n\t/** Defines the current step number. `-1` keeps all steps completed. */\n\tcurrentStep?: number;\n\t/** Additional props for the connecting line. */\n\tlineClassName?: string;\n\t/** Defines how completed steps should be displayed */\n\tcompletedVariant?: CompletedVariant;\n\t/** Custom icon for completed steps when completedVariant is 'icon' */\n\tcompletedIcon?: ReactNode;\n}\n\n// Progress Step props interface\nexport interface ProgressStepProps extends ProgressCommonProps {\n\t/** Text label for the step. */\n\tlabelText?: string;\n\n\t/** Custom icon for the step. */\n\ticon?: ReactNode;\n\n\t/** Indicates if this step is currently active. */\n\tisCurrent?: boolean;\n\n\t/** Indicates if this step has been completed. */\n\tisCompleted?: boolean;\n\n\t/** Defines the layout type: 'inline' or 'stack'. */\n\ttype?: 'inline' | 'stack';\n\n\t/** Specifies the variant style: 'dot', 'number', or 'icon'. */\n\tvariant?: 'dot' | 'number' | 'icon';\n\n\t/** Size-specific CSS classes for the step. */\n\tsizeClasses?: StepSizeClasses;\n\n\t/** Defines the size of the step: 'sm', 'md', or 'lg'. */\n\tsize: 'sm' | 'md' | 'lg';\n\n\t/** Indicates if this step is the last in the sequence. */\n\tisLast?: boolean;\n\n\t/** The index of the step in the sequence. */\n\tindex?: number;\n\n\t/** Additional class names for the connecting line. */\n\tlineClassName?: string;\n\n\t/** How to display completed steps */\n\tcompletedVariant?: CompletedVariant;\n\n\t/** Custom icon for completed steps */\n\tcompletedIcon?: ReactNode;\n}\n\nexport const ProgressSteps = ( {\n\tvariant = 'dot',\n\tsize = 'sm',\n\ttype = 'inline',\n\tcurrentStep = 1,\n\tchildren,\n\tclassName,\n\tlineClassName = 'min-w-10',\n\tcompletedVariant = 'icon',\n\tcompletedIcon = <Check />,\n\t...rest\n}: ProgressStepsProps ) => {\n\tconst totalSteps = React.Children.count( children );\n\tif ( currentStep === -1 ) {\n\t\tcurrentStep = totalSteps + 1;\n\t}\n\tconst steps = React.Children.map( children, ( child, index ) => {\n\t\tconst isCompleted = index + 1 < currentStep;\n\t\tconst isCurrent = index + 1 === currentStep;\n\t\tconst isLast = index + 1 === totalSteps;\n\n\t\tconst stepProps = {\n\t\t\tisCompleted,\n\t\t\tisCurrent,\n\t\t\tsizeClasses: sizeClassnames,\n\t\t\tsize,\n\t\t\tvariant,\n\t\t\ttype,\n\t\t\tisLast,\n\t\t\tindex,\n\t\t\tlineClassName,\n\t\t\tcompletedVariant,\n\t\t\tcompletedIcon,\n\t\t};\n\n\t\treturn (\n\t\t\t<React.Fragment key={ index }>\n\t\t\t\t{ React.isValidElement( child )\n\t\t\t\t\t? React.cloneElement( child, stepProps )\n\t\t\t\t\t: child }\n\t\t\t</React.Fragment>\n\t\t);\n\t} );\n\n\treturn (\n\t\t<div\n\t\t\tclassName={ cn(\n\t\t\t\t'flex w-full',\n\t\t\t\tclassName,\n\t\t\t\ttype === 'inline' ? 'items-center justify-between' : ''\n\t\t\t) }\n\t\t\t{ ...rest }\n\t\t>\n\t\t\t{ steps }\n\t\t</div>\n\t);\n};\n\n// ProgressStep component as {ProgressSteps.Step}\nexport const ProgressStep = ( {\n\tlabelText = '',\n\ticon = <Plus />,\n\tisCurrent,\n\tisCompleted,\n\tclassName,\n\ttype,\n\tvariant,\n\tsizeClasses,\n\tsize,\n\tisLast,\n\tindex,\n\tlineClassName,\n\tcompletedVariant = 'icon',\n\tcompletedIcon = <Check />,\n\t...rest\n}: ProgressStepProps ) => {\n\tconst stepContent = createStepContent(\n\t\tvariant,\n\t\tisCompleted,\n\t\tisCurrent,\n\t\tsizeClasses!,\n\t\tsize,\n\t\ticon,\n\t\tindex as number,\n\t\tcompletedVariant,\n\t\tcompletedIcon\n\t);\n\n\tconst stackSizeOffset = {\n\t\tlg: 'left-[calc(50%+14px)] right-[calc(-50%+14px)]',\n\t\tmd: 'left-[calc(50%+12px)] right-[calc(-50%+12px)]',\n\t\tsm: 'left-[calc(50%+10px)] right-[calc(-50%+10px)]',\n\t};\n\n\tconst topClass = {\n\t\tlg: 'top-3.5',\n\t\tmd: 'top-3',\n\t\tsm: 'top-2.5',\n\t};\n\n\tconst renderLabel = () => {\n\t\tif ( labelText ) {\n\t\t\tconst labelClasses = cn(\n\t\t\t\tsizeClasses![ size ].label,\n\t\t\t\t'text-text-tertiary',\n\t\t\t\tisCurrent ? 'text-brand-primary-600' : '',\n\t\t\t\t'break-word', // max width for inline and stack\n\t\t\t\ttype === 'stack' ? 'mt-2 transform max-w-xs' : 'mx-2 max-w-32'\n\t\t\t);\n\t\t\treturn <span className={ labelClasses }>{ labelText }</span>;\n\t\t}\n\t\treturn null;\n\t};\n\n\tconst renderConnectingLine = () => {\n\t\tif ( ! isLast ) {\n\t\t\tconst lineClasses = cn(\n\t\t\t\t'block',\n\t\t\t\tisCompleted\n\t\t\t\t\t? 'border-brand-primary-600'\n\t\t\t\t\t: 'border-border-subtle',\n\t\t\t\tlineClassName\n\t\t\t);\n\n\t\t\tif ( type === 'stack' ) {\n\t\t\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\t'relative',\n\t\t\t\t\t\t\t'flex',\n\t\t\t\t\t\t\t'border-solid',\n\t\t\t\t\t\t\t'border-y',\n\t\t\t\t\t\t\t'absolute',\n\t\t\t\t\t\t\tisCompleted\n\t\t\t\t\t\t\t\t? 'border-brand-primary-600'\n\t\t\t\t\t\t\t\t: 'border-border-subtle',\n\t\t\t\t\t\t\ttopClass[ size ],\n\t\t\t\t\t\t\tstackSizeOffset[ size ]\n\t\t\t\t\t\t) }\n\t\t\t\t\t>\n\t\t\t\t\t\t<span className=\"block\"></span>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\t\t'mr-2 border-y border-solid',\n\t\t\t\t\t\t\t! labelText && 'ml-2',\n\t\t\t\t\t\t\tlineClasses\n\t\t\t\t\t\t) }\n\t\t\t\t\t></span>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn null;\n\t};\n\n\t// Main return logic based on type\n\tif ( type === 'stack' ) {\n\t\treturn (\n\t\t\t<div className=\"relative flex-1 justify-center\">\n\t\t\t\t<div\n\t\t\t\t\tclassName={ cn( 'flex items-center flex-col', className ) }\n\t\t\t\t\t{ ...rest }\n\t\t\t\t>\n\t\t\t\t\t{ stepContent }\n\t\t\t\t\t{ renderLabel() }\n\t\t\t\t</div>\n\t\t\t\t{ renderConnectingLine() }\n\t\t\t</div>\n\t\t);\n\t}\n\treturn (\n\t\t<>\n\t\t\t<div className={ cn( 'flex items-center', className ) } { ...rest }>\n\t\t\t\t{ stepContent }\n\t\t\t\t{ renderLabel() }\n\t\t\t</div>\n\t\t\t{ renderConnectingLine() }\n\t\t</>\n\t);\n};\nProgressStep.displayName = 'ProgressSteps.Step';\n\n// Create step content\nexport const createStepContent = (\n\tvariant: 'dot' | 'number' | 'icon' | undefined,\n\tisCompleted: boolean | undefined,\n\tisCurrent: boolean | undefined,\n\tsizeClasses: StepSizeClasses,\n\tsize: 'sm' | 'md' | 'lg',\n\ticon: ReactNode,\n\tindex: number,\n\tcompletedVariant: CompletedVariant = 'icon',\n\tcompletedIcon: ReactNode = <Check />\n) => {\n\tif ( isCompleted ) {\n\t\tif ( completedVariant === 'number' ) {\n\t\t\treturn (\n\t\t\t\t<span\n\t\t\t\t\tclassName={ cn(\n\t\t\t\t\t\tcompletedStepCommonClasses( sizeClasses, size ),\n\t\t\t\t\t\t'flex items-center justify-center bg-brand-primary-600 text-text-on-color rounded-full'\n\t\t\t\t\t) }\n\t\t\t\t>\n\t\t\t\t\t{ index + 1 }\n\t\t\t\t</span>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<span className={ completedStepCommonClasses( sizeClasses, size ) }>\n\t\t\t\t{ completedIcon }\n\t\t\t</span>\n\t\t);\n\t}\n\n\tconst commonClasses = stepWrapperClasses( !! isCurrent, sizeClasses, size );\n\tconst variantClasses = getVariantClasses(\n\t\tvariant as 'dot' | 'number' | 'icon',\n\t\tisCurrent as boolean,\n\t\tsizeClasses,\n\t\tsize\n\t);\n\n\tlet content = null;\n\tif ( variant === 'number' ) {\n\t\tcontent = index + 1;\n\t} else if ( variant === 'icon' && icon ) {\n\t\tcontent = icon;\n\t}\n\n\treturn (\n\t\t<span className={ commonClasses }>\n\t\t\t<span className={ variantClasses }>{ content }</span>\n\t\t</span>\n\t);\n};\n\nProgressSteps.Step = ProgressStep;\n\nexport default ProgressSteps;\n"],"names":["sizeClassnames","ProgressSteps","variant","size","type","currentStep","children","className","lineClassName","completedVariant","completedIcon","Check","rest","totalSteps","React","steps","child","index","isCompleted","isCurrent","isLast","stepProps","jsx","cn","ProgressStep","labelText","icon","Plus","sizeClasses","stepContent","createStepContent","stackSizeOffset","topClass","renderLabel","labelClasses","renderConnectingLine","lineClasses","jsxs","Fragment","completedStepCommonClasses","commonClasses","stepWrapperClasses","variantClasses","getVariantClasses","content"],"mappings":"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"}