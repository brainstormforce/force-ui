{"version":3,"file":"area-chart.es.js","sources":["../../../src/components/area-chart/area-chart.tsx"],"sourcesContent":["import { useEffect, useState, type ReactNode } from 'react';\nimport {\n\tAreaChart as AreaChartWrapper,\n\tArea,\n\tXAxis,\n\tYAxis,\n\tCartesianGrid,\n\tTooltip,\n\tLegend,\n\tResponsiveContainer,\n} from 'recharts';\nimport ChartLegendContent from './chart-legend-content';\nimport ChartTooltipContent from './chart-tooltip-content';\nimport Label from '../label';\nimport type { CategoricalChartProps } from 'recharts/types/chart/generateCategoricalChart';\n\n// Default color constants\nconst DEFAULT_FONT_COLOR = '#6B7280';\nconst DEFAULT_AREA_COLORS = [\n\t{ stroke: '#2563EB', fill: '#BFDBFE' },\n\t{ stroke: '#38BDF8', fill: '#BAE6FD' },\n];\n\ninterface DataItem {\n\t[key: string]: number | string; // Adjust based on your data structure\n}\ninterface Color {\n\tstroke: string;\n\tfill: string;\n}\n\ninterface AreaChartProps {\n\t/** An array of objects representing the source data for the chart. */\n\tdata: DataItem[];\n\n\t/** An array of strings representing the keys to access data in each data object. Used for identifying different data series. */\n\tdataKeys: string[];\n\n\t/** An array of color strings that determine the colors for each data series in the chart. */\n\tcolors?: Color[];\n\n\t/** Defines the variant of Area Chart. */\n\tvariant?: 'solid' | 'gradient';\n\n\t/** Whether to render the `<XAxis />` component for the x-axis. */\n\tshowXAxis?: boolean;\n\n\t/** Whether to render the `<XAxis />` component for the y-axis. */\n\tshowYAxis?: boolean;\n\n\t/** Toggle the visibility of the tooltip on hover, displaying detailed information for each data point. */\n\tshowTooltip?: boolean;\n\n\t/** The tooltip indicator. It can be `dot`, `line` or `dashed`. */\n\ttooltipIndicator?: 'dot' | 'line' | 'dashed';\n\n\t/** An array of objects representing the source data for the chart. */\n\ttooltipLabelKey?: string;\n\n\t/** Whether to render the `<Legend />` component to identify data series. */\n\tshowLegend?: boolean;\n\n\t/** Whether to display the `<CartesianGrid />`, adding horizontal and vertical grid lines. */\n\tshowCartesianGrid?: boolean;\n\n\t/** A function used to format the ticks on the x-axis, e.g., for formatting dates or numbers. */\n\txAxisTickFormatter?: ( value: string ) => string;\n\n\t/**\n\t * A function used to format the ticks on the x-axis, e.g., for formatting dates or numbers.\n\t * @deprecated Use `xAxisTickFormatter` instead.\n\t */\n\ttickFormatter?: ( value: string ) => string;\n\n\t/** A function used to format the ticks on the y-axis, e.g., for converting 1000 to 1K. */\n\tyAxisTickFormatter?: ( value: number ) => string;\n\n\t/** The key in the data objects representing values for the x-axis. This is used to access the x-axis values from each data entry. */\n\txAxisDataKey?: string;\n\n\t/** The key in the data objects representing values for the y-axis. This is used to access the y-axis values from each data entry. */\n\tyAxisDataKey?: string;\n\n\t/** Font size for the labels on the x-axis. */\n\txAxisFontSize?: 'sm' | 'md' | 'lg';\n\n\t/** Font color for the labels on the x-axis. */\n\txAxisFontColor?: string;\n\n\t/** Width of the chart container. */\n\tchartWidth?: number;\n\n\t/** Height of the chart container. */\n\tchartHeight?: number;\n\n\t/**\n\t * Area chart Wrapper props to apply additional props to the wrapper component. Ex. `margin`, or `onClick` etc.\n\t * @see https://recharts.org/en-US/api/AreaChart\n\t */\n\tareaChartWrapperProps?: Omit<\n\t\tCategoricalChartProps,\n\t\t'width' | 'height' | 'data'\n\t>;\n\n\t/**\n\t * Custom component to display when no data is available.\n\t * If not provided, a default \"No data available\" message will be displayed.\n\t */\n\tnoDataComponent?: ReactNode;\n}\n\nconst AreaChart = ( {\n\tdata,\n\tdataKeys,\n\tcolors = [],\n\tvariant = 'solid',\n\tshowXAxis = true,\n\tshowYAxis = true,\n\tshowTooltip = true,\n\ttooltipIndicator = 'dot', // dot, line, dashed\n\ttooltipLabelKey,\n\tshowLegend = true,\n\tshowCartesianGrid = true,\n\txAxisTickFormatter,\n\ttickFormatter,\n\tyAxisTickFormatter,\n\txAxisDataKey,\n\tyAxisDataKey,\n\txAxisFontSize = 'sm', // sm, md, lg\n\txAxisFontColor = DEFAULT_FONT_COLOR,\n\tchartWidth = 350,\n\tchartHeight = 200,\n\tareaChartWrapperProps = {\n\t\tmargin: {\n\t\t\tleft: 14,\n\t\t\tright: 14,\n\t\t\ttop: 6,\n\t\t\tbottom: 6,\n\t\t},\n\t},\n\tnoDataComponent,\n}: AreaChartProps ) => {\n\tconst [ width, setWidth ] = useState( chartWidth );\n\tconst [ height, setHeight ] = useState( chartHeight );\n\n\tconst appliedColors = colors.length > 0 ? colors : DEFAULT_AREA_COLORS;\n\n\tuseEffect( () => {\n\t\tsetWidth( chartWidth );\n\t\tsetHeight( chartHeight );\n\t}, [ chartWidth, chartHeight ] );\n\n\tconst fontSizeMap = {\n\t\tsm: '12px',\n\t\tmd: '14px',\n\t\tlg: '16px',\n\t};\n\n\tconst fontSizeVariant = fontSizeMap[ xAxisFontSize ] || fontSizeMap.sm;\n\n\tconst renderGradients = () => (\n\t\t<defs>\n\t\t\t{ appliedColors.map( ( color, index ) => (\n\t\t\t\t<linearGradient\n\t\t\t\t\tkey={ `gradient${ index }` }\n\t\t\t\t\tid={ `fill${ index }` }\n\t\t\t\t\tx1=\"0\"\n\t\t\t\t\ty1=\"0\"\n\t\t\t\t\tx2=\"0\"\n\t\t\t\t\ty2=\"1\"\n\t\t\t\t>\n\t\t\t\t\t<stop\n\t\t\t\t\t\toffset=\"5%\"\n\t\t\t\t\t\tstopColor={ color.fill }\n\t\t\t\t\t\tstopOpacity={ 0.8 }\n\t\t\t\t\t/>\n\t\t\t\t\t<stop\n\t\t\t\t\t\toffset=\"95%\"\n\t\t\t\t\t\tstopColor={ color.fill }\n\t\t\t\t\t\tstopOpacity={ 0.1 }\n\t\t\t\t\t/>\n\t\t\t\t</linearGradient>\n\t\t\t) ) }\n\t\t</defs>\n\t);\n\n\tif ( ! data || data.length === 0 ) {\n\t\treturn (\n\t\t\tnoDataComponent || (\n\t\t\t\t<Label size=\"sm\" variant=\"help\">\n\t\t\t\t\tNo data available\n\t\t\t\t</Label>\n\t\t\t)\n\t\t);\n\t}\n\n\treturn (\n\t\t<ResponsiveContainer width={ width } height={ height }>\n\t\t\t<AreaChartWrapper { ...areaChartWrapperProps } data={ data }>\n\t\t\t\t{ showCartesianGrid && <CartesianGrid vertical={ false } /> }\n\t\t\t\t<XAxis\n\t\t\t\t\tdataKey={ xAxisDataKey }\n\t\t\t\t\ttickLine={ false }\n\t\t\t\t\taxisLine={ false }\n\t\t\t\t\ttickMargin={ 8 }\n\t\t\t\t\ttickFormatter={ xAxisTickFormatter || tickFormatter }\n\t\t\t\t\ttick={ {\n\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\tfill: xAxisFontColor,\n\t\t\t\t\t} }\n\t\t\t\t\thide={ ! showXAxis }\n\t\t\t\t\tinterval=\"preserveStartEnd\"\n\t\t\t\t/>\n\t\t\t\t<YAxis\n\t\t\t\t\tdataKey={ yAxisDataKey }\n\t\t\t\t\ttickLine={ false }\n\t\t\t\t\taxisLine={ false }\n\t\t\t\t\ttickMargin={ 8 }\n\t\t\t\t\ttickFormatter={ yAxisTickFormatter }\n\t\t\t\t\ttick={ {\n\t\t\t\t\t\tfontSize: fontSizeVariant,\n\t\t\t\t\t\tfill: xAxisFontColor,\n\t\t\t\t\t} }\n\t\t\t\t\thide={ ! showYAxis }\n\t\t\t\t/>\n\t\t\t\t{ showTooltip && (\n\t\t\t\t\t<Tooltip\n\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t<ChartTooltipContent\n\t\t\t\t\t\t\t\tindicator={ tooltipIndicator }\n\t\t\t\t\t\t\t\tlabelKey={ tooltipLabelKey }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t\t{ showLegend && (\n\t\t\t\t\t<Legend\n\t\t\t\t\t\tcontent={\n\t\t\t\t\t\t\t<ChartLegendContent\n\t\t\t\t\t\t\t\tfontSizeVariant={ fontSizeVariant }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t) }\n\n\t\t\t\t{ variant === 'gradient' && renderGradients() }\n\n\t\t\t\t{ dataKeys.map( ( key, index ) => (\n\t\t\t\t\t<Area\n\t\t\t\t\t\tkey={ key }\n\t\t\t\t\t\ttype=\"monotone\"\n\t\t\t\t\t\tdataKey={ key }\n\t\t\t\t\t\tstroke={\n\t\t\t\t\t\t\tappliedColors[ index % appliedColors.length ].stroke\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfill={\n\t\t\t\t\t\t\tvariant === 'gradient'\n\t\t\t\t\t\t\t\t? `url(#fill${ index })`\n\t\t\t\t\t\t\t\t: appliedColors[ index % appliedColors.length ]\n\t\t\t\t\t\t\t\t\t.fill\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstackId=\"1\"\n\t\t\t\t\t/>\n\t\t\t\t) ) }\n\t\t\t</AreaChartWrapper>\n\t\t</ResponsiveContainer>\n\t);\n};\n\nexport default AreaChart;\n"],"names":["DEFAULT_FONT_COLOR","DEFAULT_AREA_COLORS","AreaChart","data","dataKeys","colors","variant","showXAxis","showYAxis","showTooltip","tooltipIndicator","tooltipLabelKey","showLegend","showCartesianGrid","xAxisTickFormatter","tickFormatter","yAxisTickFormatter","xAxisDataKey","yAxisDataKey","xAxisFontSize","xAxisFontColor","chartWidth","chartHeight","areaChartWrapperProps","noDataComponent","width","setWidth","useState","height","setHeight","appliedColors","useEffect","fontSizeMap","fontSizeVariant","renderGradients","jsx","color","index","jsxs","Label","ResponsiveContainer","AreaChartWrapper","CartesianGrid","XAxis","YAxis","Tooltip","ChartTooltipContent","Legend","ChartLegendContent","key","Area"],"mappings":"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"}