{"version":3,"file":"hooks.es.js","sources":["../../src/utilities/hooks.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\n\ntype AsyncFunction<T extends unknown[], R> = ( ...args: T ) => Promise<R>;\n\n/**\n * Debounce a value\n * @param {any}    value - The value to debounce\n * @param {number} delay - The delay in milliseconds\n * @return {any} The debounced value\n */\nexport const useDebounce = ( value: unknown, delay: number = 500 ) => {\n\tconst [ debouncedValue, setDebouncedValue ] = useState( value );\n\n\tuseEffect( () => {\n\t\tconst timeout = setTimeout( () => setDebouncedValue( value ), delay );\n\n\t\treturn () => clearTimeout( timeout );\n\t}, [ value, delay ] );\n\n\treturn debouncedValue;\n};\n\n/**\n * Debounce a callback function.\n * @param {Function} func  - The function to debounce\n * @param {number}   delay - The delay in milliseconds\n * @return {Function} The debounced function\n */\nexport const useDebouncedCallback = (\n\tfunc: AsyncFunction<unknown[], void>,\n\tdelay: number = 500\n) => {\n\tconst timeoutRef = useRef<NodeJS.Timeout | null>( null );\n\n\treturn useCallback(\n\t\t( ...args: unknown[] ) => {\n\t\t\tif ( timeoutRef.current ) {\n\t\t\t\tclearTimeout( timeoutRef.current );\n\t\t\t}\n\n\t\t\ttimeoutRef.current = setTimeout(\n\t\t\t\t() => func( ...( args as [unknown] ) ),\n\t\t\t\tdelay\n\t\t\t);\n\t\t},\n\t\t[ func, delay ]\n\t);\n};\n"],"names":["useDebouncedCallback","func","delay","timeoutRef","useRef","useCallback","args"],"mappings":";AA4BO,MAAMA,IAAuB,CACnCC,GACAC,IAAgB,QACZ;AACE,QAAAC,IAAaC,EAA+B,IAAK;AAEhD,SAAAC;AAAA,IACN,IAAKC,MAAqB;AACzB,MAAKH,EAAW,WACf,aAAcA,EAAW,OAAQ,GAGlCA,EAAW,UAAU;AAAA,QACpB,MAAMF,EAAM,GAAKK,CAAoB;AAAA,QACrCJ;AAAA,MACD;AAAA,IACD;AAAA,IACA,CAAED,GAAMC,CAAM;AAAA,EACf;AACD;"}